<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_towerArcher</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
placed = 1;
range = 100;
dmg = 10;
level = 1;
rof = 200; // Rate of fire :)
facingLeft = 1;
facingRight = 0;
attacking = 0;
comingOut = 1;
target = -1;
comingin = 0;
attackTimer = 0;
arrow = 0;
nearestEnemy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fades the object in, when it is first placed
if (!placed){
    image_alpha = .5;
    myArms.visible = 0;
    myArms.x = x + 10;
    myArms.y = y;
    if (!global.buildingDefenceP1){
        instance_destroy();
    }
    
}else{
    scr_effects_fade_in(); 
    myArms.visible = 1;
}
//When the tower is placed
if (placed){
    //Changes the position and sprite of the archer based on which way the tower is facing
    if (facingLeft &amp;&amp; attacking &amp;&amp; !comingOut){
        myArms.x = x;
        myArms.y = y;
        myArms.sprite_index = spr_archerTowerArmsLeft; 
    }else if (facingRight &amp;&amp; attacking &amp;&amp; !comingOut){
        myArms.x = x + 34;
        myArms.y = y;
        myArms.sprite_index = spr_archerTowerArmsRight; 
    }
    // if there is an enemy in range, make the archer arms come out of the tower
    if (comingOut &amp;&amp; facingLeft){
        if (myArms.x &gt; x ){
            myArms.x -= .5;
            myArms.sprite_index = spr_archerTowerArmsLeft;
        }else{
            comingOut = 0;
        }
    }else if(comingOut &amp;&amp; facingRight){
        if (myArms.x &lt; x + 34){
            myArms.x += .5;
            myArms.sprite_index = spr_archerTowerArmsRight; 
        }else{
            comingOut = 0;
        }
    }
    //When there is no enemy in range, make the archer arms go back in the tower
    if (!attacking &amp;&amp; !comingOut){
        if (myArms.x &lt; x -2 &amp;&amp; facingLeft){
            myArms.x -=.5;
        }else if (!attacking &amp;&amp; !comingOut){
            if (myArms.x &gt; x + 5 &amp;&amp; facingRight){
                myArms.x -= .5;    
            }
        }
    }
    //sets the target to the nearest enemy(if there is one), if there is not enemy, it sets the target to -1
    if (instance_exists(obj_wolf)){
        if (distance_to_object(instance_nearest(x+10,y,obj_wolf) &lt; range)){
            attacking = 1;
            if (instance_exists(obj_wolf)){
                nearestEnemy = instance_nearest(x+10,y,obj_wolf);
                if (nearestEnemy.x &gt; (x + 10)){
                    facingRight = 1;
                    facingLeft = 0;
                }else{
                    facingLeft = 1;
                    facingRight = 0;   
                }    
            }
           
        } else{
            attacking = 0;
        }  
    }
    if (!instance_exists(obj_wolf)){
        target = -1;
        attacking = 0;
        comingOut = 0;
    }
    target = nearestEnemy;
    //makes the archer pointToward the target
    if (attacking &amp;&amp; !comingOut){
        if (facingRight){
            myArms.image_angle = point_direction(myArms.x,myArms.y,target.x,target.y);
        }else{
            myArms.image_angle = (point_direction(myArms.x,myArms.y,target.x,target.y)-180);       
        }
    }
    //makes the tower attack
    if (attacking &amp;&amp; !comingOut){
        image_speed = .1;
        attackTimer ++;
        if (attackTimer &gt;= rof){
            arrow = instance_create(x,y,obj_arrow);
            arrow.dmg = (dmg+choose(0,1,2,-1,-3));
            arrow.direction = (point_direction(arrow.x,arrow.y,target.x,target.y)+choose(.5,-.5,1,-1));
            arrow.startDir = (point_direction(arrow.x,arrow.y,target.x,target.y)+choose(.5,-.5,1,-1)); 
            arrow.speed = 4;
            arrow.target = target;
            attackTimer = 0;
        }   
    }
}
//End of when tower is placed 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>45,45</point>
  </PhysicsShapePoints>
</object>
