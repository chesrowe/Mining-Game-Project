<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///general variables
spriteColor = c_white;
directional = 0;
autoBuild = 0;
placed = 0;
level = 1;
surfaceOnly = 0;
groundY = 0;
placeX = 0;
placeY = 0;
originOffX = 0;
originOffY = 0;
mouseYOff = 50;
placeSoundPlayed = 0;
costWoodCommon = 300;
costStone = 100;
totalResourcesNeeded = 0;
amountBuilt = 0;
devMode = 0;
xp = 100; //xp a worker gets for building
///Being built specific
//Cost array table 
//cost[0,0]
cost[0,0] = 'woodCommon'; //Type
cost[0,1] = 400; //Total amount needed
cost[0,2] = 400; //Amount left
cost[1,0] = -1; 
cost[1,1] = -1; 
cost[1,2] = -1; 
cost[2,0] = -1; 
cost[2,1] = -1; 
cost[2,2] = -1; 
built = 0;
posDistance = 30;
posTime = 5;
midTime = 20;
midRandom = 60;
percentBuilt = 0;
amountBuilt = 0;
//Add up the total amount of resources needed to build the building
for (i = 0; i &lt;= 3; i++;){
    if (cost[i,1] != -1){
        totalResourcesNeeded += cost[i,1];
    }else{
        break;
    }
}

///Sprites for the buildings
spriteLevel[0] = 0;
spriteLevel[1] = 0;
spriteLevel[2] = 0;
spriteLevel[3] = 0;
spriteLevel[4] = 0;
spriteLevel[5] = 0;

///sounds for building
placeSound[0] = sd_buildingPlace1;
placeSound[1] = sd_buildingPlace2;
placeSound[2] = sd_buildingPlace3;
placeSound[3] = sd_buildingPlace4;

//Buttons
showButtons = 0;
buttonsSpawned = 0;
buttonNumber = 0;
buttonsDelete = 0;

button[0,0] = obj_structureButtonLevelUpTowncenter;
button[0,1] = 90;
button[0,2] = 260;
button[1,0] = -4;
button[1,1] = -4;
button[1,2] = -4;
button[2,0] = -4;

//Get the number of buttons the structure has
for (i = 0; i &lt; 10; i++){
    if (button[i,0] == -4){
        break;
    }else{
        buttonNumber ++;
    }
}

//Pop up text
buildingName = "Settlement Center "
textPopUp = 0;
popUpX1 = -44
popUpX2 = 89
popUpY1 = -284;
popUpY2 = -302;
textDrawX = -70;
textDrawY = -300;
yOffset = 100;
textXExtra = 15;
popUpWidth = 6;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sounds

sound[0] = sd_windowPopUp1;
sound[1] = sd_windowPopUp2;
sound[2] = sd_windowPopUp3;
sound[3] = sd_windowPopUp4;
soundRR = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrade costs/vars
levelUp = 0;
upgrade = 0;
amountUpgraded = 0;

//wood - 200
upgradeCost[0,0] = 'woodCommon'; //type
upgradeCost[0,1] = 200; //Amount needed
upgradeCost[0,2] = 200; //Amount left
//Stone - 200
upgradeCost[1,0] = 'stone';
upgradeCost[1,1] = 200;
upgradeCost[1,2] = 200;
//food - 200
upgradeCost[2,0] = 'food';
upgradeCost[2,1] = 200;
upgradeCost[2,2] = 200;
//next (empty)
upgradeCost[3,0] = -4;
upgradeCost[3,1] = -4;
upgradeCost[3,2] = -4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>117</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_snap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General
sprite_index = spriteLevel[(level-1)];



//Makes the building follow the right curser



//Make the building follow the curser when it's not placed
if (!placed){
    if !(position_meeting(x,y+16,obj_tileSurfaceFlatParent)){
        //groundY = (instance_nearest(mouse_x,mouse_y,obj_tileSurfaceFlatParent).y);
        groundY = mouse_y;
    }else{
        groundY = (instance_position(x,y+16,obj_tileSurfaceFlatParent).y);
    }
    placeX = mouse_x;
    placeY = mouse_y
    image_alpha = .5;
    x = placeX-originOffX;
    if (placeY &gt; groundY - 50){
        y = groundY-originOffY;
    }else{
        y = placeY+mouseYOff;
    }
    //Place the facing direction if the building is a directional buliding
    if (directional){
        if (mouse_wheel_down()){
            image_xscale = -1;
            
        }
        if (mouse_wheel_up()){
            image_xscale = 1;
            
        }
        
    }
    //Sprite color
    if (!place_meeting(x, y, obj_buildingParent) &amp;&amp; !place_meeting(x, y, obj_resourceParent) &amp;&amp; !place_meeting(x, y, obj_treeParent) &amp;&amp; scr_building_can_be_placed()){
        spriteColor = c_white
    }else{
        spriteColor = c_red;
    }
}else if (built &amp;&amp; !upgrade){
    //play the place sound
    image_alpha = 1;
    if (!placeSoundPlayed &amp;&amp; !autoBuild){
        var sound = audio_play_sound_at(placeSound[irandom(3)],x,y,0,1000,200,1,0,999);
        audio_sound_gain(sound,global.sfxVol,0);
        placeSoundPlayed = 1;
        // Add 10 to max population if the building was a house
        if (object_index == obj_house){
            global.maxPop += 10;
        }
    }else if (autoBuild){
        placeSoundPlayed = 1;
    }
}else if (!built){
    image_alpha = .5; 
    percentBuilt = ((amountBuilt/totalResourcesNeeded)*100);   
}
//Complete the stucture
if (percentBuilt &gt;= 100){
    percentBuilt = 100;
    built = 1;
}


    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Buttons


if (showButtons){
    //If the buttons are not spawn, spawn them
    if (!buttonsSpawned){
        for (i = 0; i &lt; buttonNumber; i++){
            buttonsDelete = 0;
            var but = instance_create(x - button[i,1],y - button[i,2],button[i,0]);
            but.myStructure = id;
            but.xx = button[i,1];
            but.yy = button[i,2];
            buttonsSpawned = 1;
        }
    }
}else{
    //Delete the buttons
    if (buttonsSpawned){
        buttonsDelete = 1;
        buttonsSpawned = 0;    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Building text popup
if (instance_position(mouse_x,mouse_y,object_index) &amp;&amp; !instance_position(mouse_x, mouse_y, obj_workerParent)){
    if (!showButtons &amp;&amp; built){
        textPopUp = 1;
    }
}else{
    textPopUp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level up

if (levelUp){
    level ++;
    sprite_index = spriteLevel[level-1];
    levelUp = 0;
    upgrade = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrading

if (upgrade){
    image_alpha = .5;
    if (scr_building_find_resource_needed_upgrade(id) == -4){
        upgrade = 0;
        levelUp = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide buttons
with(obj_buildingParent){
    showButtons = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ALL BUILDINGS: hide buttons

if (!instance_position(mouse_x,mouse_y,obj_structureButtonParent)){
    with(obj_buildingParent){
        showButtons = 0;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dev mode

if (!devMode){
    devMode = 1;
}else {
    devMode = 0;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show buttons

if (!instance_position(mouse_x,mouse_y,obj_workerParent) &amp;&amp; built &amp;&amp; !global.selectBoxStart){
    if (!showButtons){
        showButtons = 1;
        textPopUp = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play sounds

if (built &amp;&amp; !instance_position(mouse_x, mouse_y, obj_workerParent)){
    audio_play_sound(sound[soundRR],999,0);
    
    //Randomize round robins
    if (soundRR &gt; 3){
        while(soundRR == 4){
            soundRR = irandom(3);   
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start selected workers building

//Check if there is any workers currently selected and if the player is not currently building
if (global.selectedNumber &gt; 0 &amp;&amp; scr_unit_array_check_for_worker() &amp;&amp; !global.workerBuild &amp;&amp; !built){
    //Set the selected workers to building
    (obj_globalCon.buildButton).visible = 0;
    global.workerBuildMenu = 0;
    var target = id;
    scr_unit_array_set_resource_target('building',target);   
    scr_unit_array_clear();    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start selected workers upgrading

//Check if there is any workers currently selected and if the player is not currently building
if (global.selectedNumber &gt; 0 &amp;&amp; scr_unit_array_check_for_worker() &amp;&amp; !global.workerBuild &amp;&amp; built &amp;&amp; upgrade){
    //Set the selected workers to building
    (obj_globalCon.buildButton).visible = 0;
    global.workerBuildMenu = 0;
    var target = id;
    scr_unit_array_set_resource_target('upgrading',target);   
    scr_unit_array_clear();    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self/percent/pop-up

draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, 0, spriteColor, image_alpha); 


//If the building is still being built, draw the percentage
if (!built){
    draw_text(x,y - floor((sprite_height/2)*2.5), string(floor(percentBuilt))+"%");
}

//Text pop up
if (textPopUp){
    scr_draw_ui_box(popUpWidth ,0,x + textDrawX - 33 ,y + yOffset + textDrawY - 24);
    draw_text_colour(x + textDrawX + textXExtra, y + yOffset + textDrawY, buildingName + " Level  " + string(level),c_white,c_white,c_white,c_white,1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
