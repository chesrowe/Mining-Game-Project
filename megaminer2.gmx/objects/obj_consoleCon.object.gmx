<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init 

global.consoleOn = 0;
commandGot = 0;
text = "";

///vars/init
active = 0;
keyEntered = 0;
key = 0;
global.shiftPressed = 0;
cmdList = ds_list_create();
listPos = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.dev_mode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open console

if (keyboard_check_pressed(192)){
    ///Toggle console
    if (global.consoleOn){
        global.consoleOn = 0;
        commandGot = 0;
    }else{
        global.consoleOn = 1;
    }      
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///See if shift is pressed

global.shiftPressed = keyboard_check(vk_shift);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get keys
if (global.consoleOn){
    //The max width(in pixels) the text in the box can be
    var limit = 500;
    
    //Input
    if (keyboard_key != 0 &amp;&amp; !keyEntered){
        keyEntered = 1;
        key = keyboard_key;
        if (string_width(text) &lt; (limit-string_width("W"))){
            switch(keyboard_key){
                case ord('Q'): if (global.shiftPressed) {text += 'Q'} else {text += 'q';} break;
                case ord('W'): if (global.shiftPressed) {text += 'W'} else {text += 'w';} break;
                case ord('E'): if (global.shiftPressed) {text += 'E'} else {text += 'e';} break;
                case ord('R'): if (global.shiftPressed) {text += 'R'} else {text += 'r';} break;
                case ord('T'): if (global.shiftPressed) {text += 'T'} else {text += 't';} break;
                case ord('Y'): if (global.shiftPressed) {text += 'Y'} else {text += 'y';} break;
                case ord('U'): if (global.shiftPressed) {text += 'U'} else {text += 'u';} break;
                case ord('O'): if (global.shiftPressed) {text += 'O'} else {text += 'o';} break;
                case ord('P'): if (global.shiftPressed) {text += 'P'} else {text += 'p';} break;
                case ord('A'): if (global.shiftPressed) {text += 'A'} else {text += 'a';} break;
                case ord('I'): if (global.shiftPressed) {text += 'I'} else {text += 'i';} break;
                case ord('S'): if (global.shiftPressed) {text += 'S'} else {text += 's';} break;
                case ord('D'): if (global.shiftPressed) {text += 'D'} else {text += 'd';} break;
                case ord('F'): if (global.shiftPressed) {text += 'F'} else {text += 'f';} break;
                case ord('G'): if (global.shiftPressed) {text += 'G'} else {text += 'g';} break;
                case ord('H'): if (global.shiftPressed) {text += 'H'} else {text += 'h';} break;
                case ord('J'): if (global.shiftPressed) {text += 'J'} else {text += 'j';} break;
                case ord('K'): if (global.shiftPressed) {text += 'K'} else {text += 'k';} break;
                case ord('L'): if (global.shiftPressed) {text += 'L'} else {text += 'l';} break;
                case ord('Z'): if (global.shiftPressed) {text += 'Z'} else {text += 'z';} break;
                case ord('X'): if (global.shiftPressed) {text += 'X'} else {text += 'x';} break;
                case ord('C'): if (global.shiftPressed) {text += 'C'} else {text += 'c';} break;
                case ord('V'): if (global.shiftPressed) {text += 'V'} else {text += 'v';} break;
                case ord('B'): if (global.shiftPressed) {text += 'B'} else {text += 'b';} break;
                case ord('N'): if (global.shiftPressed) {text += 'N'} else {text += 'n';} break;
                case ord('M'): if (global.shiftPressed) {text += 'M'} else {text += 'm';} break;
                case ord('1'): if (global.shiftPressed) {text += '!'} else {text += '1';} break;
                case ord('2'): if (global.shiftPressed) {text += '@'} else {text += '2';} break;
                case ord('3'): if (global.shiftPressed) {text += '#'} else {text += '3';} break;
                case ord('4'): if (global.shiftPressed) {text += '$'} else {text += '4';} break;
                case ord('5'): if (global.shiftPressed) {text += '%'} else {text += '5';} break;
                case ord('6'): if (global.shiftPressed) {text += '^'} else {text += '6';} break;
                case ord('7'): if (global.shiftPressed) {text += '&amp;'} else {text += '7';} break;
                case ord('8'): if (global.shiftPressed) {text += '*'} else {text += '8';} break;
                case ord('9'): if (global.shiftPressed) {text += '('} else {text += '9';} break;
                case 48: if (global.shiftPressed) {text += ')'} else {text += '0';} break;
                case 188: text += ','; break;
                case 189: text += '_'; break;
            }
        }
        //set the pos of the marker
        textWidth = string_width(text); 
        
    
    }else if (keyboard_key != key){
        keyEntered = 0;
    }
    
    //Backspace
    
    if (keyboard_check_pressed(vk_backspace)){
        //Backspace
        var lastChar = (string_length(text));
        show_debug_message(string(lastChar));
        show_debug_message(string(string_delete(text,lastChar,1)));
        
        if (lastChar != -1){
            text = string_delete(text,lastChar,1);
        }
    }
}

//Select recent commands
if (keyboard_check_pressed(vk_up)){
    if (ds_list_size(cmdList) &gt;= 1 &amp;&amp; listPos &lt; ds_list_size(cmdList)){
        text = cmdList[| listPos]; 
    }
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get command

if (keyboard_check_pressed(vk_enter)){
    if (!commandGot){
        var commandType = -1;
        var command = text;
        text = "";
        commandGot = 1;
    }
}
//Read the command
if (commandGot){
    var commandLen = string_width(string(command));    
    var i = 0;
    repeat(commandLen){
        if (string_char_at(command,i) == "("){
            commandType = string_copy(command,1,i-1);
            show_debug_message(commandType);
            break;
        } 
        i++;  
    }
    //Execute command
    switch(commandType){
        //instance_create(x,y,object)
        case "instance_create":
            var a = i+1;
            var arg1 = "";
            //find first arg
            repeat(commandLen){
                if (string_char_at(command,a) != ","){
                    arg1 += string_char_at(command,a);
                    a++;
                }else{
                    show_debug_message(arg1);
                    break;
                }      
            }
            //find second arg
            var e = a+1;
            var arg2 = "";
            repeat(commandLen){
                if (string_char_at(command,e) != ","){
                    arg2 += string_char_at(command,e);
                    e++;
                }else{
                    show_debug_message(arg2);
                    break;
                }      
            }
            //Find the third arg
            var r = e+1;
            var arg3 = "";
            repeat(commandLen){
                if (string_char_at(command,r) != ")"){
                    arg3 += string_char_at(command,r);
                    r++;
                }else{
                    show_debug_message(arg3);
                    break;
                }      
            }
            //find the object from the third arg
            createObj = asset_get_index(arg3);
            //Create the instance
            arg1 = real(arg1);
            arg2 = real(arg2);
            arg3 = createObj;
            instance_create(arg1,arg2,arg3);
            //global.consoleOn = 0;
            commandGot = 0;
            ds_list_add(cmdList,command);
        break;    
    
    }

}
//backup
commandGot = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the console
if (global.consoleOn &amp;&amp; global.dev_mode){
    draw_set_colour(c_black);
    draw_rectangle(view_xview[0],view_yview[0] + 20,view_xview[0] + 450, view_yview[0] + 40,0);
    
    draw_set_color(c_white);
    draw_text(view_xview[0] + 2, view_yview[0] + 20 ,text);
    draw_text(view_xview[0] + 2 + (string_width(text) + 4), view_yview[0] + 20, "|");
    draw_set_color(c_black);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
