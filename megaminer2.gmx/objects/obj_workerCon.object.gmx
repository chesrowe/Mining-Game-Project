<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General

myWorker = 0;






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap to worker
x = myWorker.x;
y = myWorker.y;

with(myWorker){
    other.targetDistance = point_distance(x,y,moveTargetX,moveTargetY)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug stuff

//draws selected
if (myWorker.selected){
    draw_sprite(spr_selectorP1,0,myWorker.x-32,myWorker.y-32);
    
}
//draw debug info
if (global.dev_mode &amp;&amp; myWorker.showDebug){
    draw_set_font(ft_gameFont);
    draw_text(x-15,y-300,"inv[3,0]" + string(myWorker.inv[3,0]));
    draw_text(x-15,y-290,"inv[3,1]" + string(myWorker.inv[3,1]));
    draw_text(x-15,y-280,"inv[3,2]" + string(myWorker.inv[3,2]));
    draw_text(x-15,y-270,"inv[3,3]" + string(myWorker.inv[3,3]));
    draw_text(x-15,y-260,"inv[3,4]" + string(myWorker.inv[3,4]));
    draw_text(x-15,y-250,"inv[3,5]" + string(myWorker.inv[3,5]));
    draw_text(x-15,y-240,"inv[3,6]" + string(myWorker.inv[3,6]));
    draw_text(x-15,y-230,"middleTimer_" + string(myWorker.middleTimer));
    draw_text(x-15,y-220,"resourcePosition_" + string(myWorker.resourcePosition));
    draw_text(x-15,y-210,"PositionTimer_" + string(myWorker.positionTimer));
    draw_text(x-15,y-200,"level_" + string(myWorker.level));
    draw_text(x-15,y-150,"State:_" + string(myWorker.state));
    if (myWorker.selected){    
        draw_text(x-15,y-140,"Selected" + string(myWorker.selected));
        draw_text(x-15,y-130,"InsideSelectBox" + string(myWorker.insideSelectBox));
        draw_text(x-15,y-120,"DistanceToTarget_" + string(targetDistance));
    }
    if (myWorker.state == 'mining'){
        draw_line_width_colour(myWorker.x,myWorker.y,(myWorker.target).x,(myWorker.target).y,4,c_green,c_green);
        draw_text(x-15,y-140,"Resource_" + string((myWorker.target).resource));
        draw_text(x-15,y-130,"goingTo_" + string(myWorker.goingTo));
        draw_text(x-15,y-120,"comingFrom_" + string(myWorker.comingFrom));
        switch((myWorker.target).resource){
            case 'gold': draw_text(x-15,y-110,"maxGold/GoldHeld_" + string(myWorker.maxGold)+ "/" + string(myWorker.goldHeld));
            break;
            case 'stone': draw_text(x-15,y-110,"maxStone/StoneHeld_" + string(myWorker.maxStone)+ "/" + string(myWorker.stoneHeld));
            break;
        }
        draw_text(x-15,y-100,"miningTime_" + string(myWorker.miningTime));
        draw_text(x-15,y-90,"miningTimer_" + string(myWorker.miningTimer));
        draw_text(x-15,y-80,"mineStart_" + string(myWorker.mineStart));
        draw_text(x-15,y-70,"Waiting to mine_" + string(myWorker.waitingToMine));
        draw_text(x-15,y-60,"mineAmount_" + string(myWorker.mineAmount));
        draw_text(x-15,y-50,"miningLevel_" + string(myWorker.miningLevel));
        draw_text(x-15,y-100,"moveToTime/timer" + string(myWorker.moveToTime)+ "/" + string(myWorker.moveToTimer));
        
    }
    if (myWorker.state == 'woodcutting'){
        if (instance_exists(myWorker.target)){
            draw_line_width_colour(myWorker.x,myWorker.y,(myWorker.target).x,(myWorker.target).y,4,c_green,c_green);
        }
        draw_text(x-15,y-190,"woodcuttingLevel_" + string(myWorker.woodcuttingLevel));
        draw_text(x-15,y-180,"woodcuttingXpNeeded_" + string(myWorker.xpNeededWoodcutting));
        draw_text(x-15,y-160,"woodcuttingLevel_" + string(myWorker.woodcuttingLevel));
        draw_text(x-15,y-170,"woodcuttingXp_" + string(myWorker.xpWoodcutting));
        draw_text(x-15,y-140,"CuttingTime_" + string(myWorker.cuttingTime));   
        draw_text(x-15,y-130,"CuttingTimer_" + string(myWorker.cuttingTimer));
        draw_text(x-15,y-120,"CutStart_" + string(myWorker.cutStart));    
        draw_text(x-15,y-110,"middleTimer_" + string(myWorker.middleTimer));  
        draw_text(x-15,y-100,"moveToTime/timer" + string(myWorker.moveToTime)+ "/" + string(myWorker.moveToTimer));
        draw_text(x-15,y-90,"Move_" + string(myWorker.move));   
        draw_text(x-15,y-80,"moveTimer_" + string(myWorker.moveTimer));   
        draw_text(x-15,y-70,"footstepTimer_" + string(myWorker.footstepTimer)); 
        draw_text(x-15,y-60,"cutSound_" + string(myWorker.cutSound));  
        draw_text(x-15,y-50,"image_index_" + string(myWorker.image_index));
    }
    if (myWorker.state == 'moveToTarget'){
        draw_line_width_colour(myWorker.x,myWorker.y,myWorker.moveTargetX,myWorker.y,4,c_green,c_green);
        draw_text(x-15,y-110,"MoveTargetX" + string(myWorker.moveTargetX)); 
        
    }
    if (myWorker.state == 'idle'){
        draw_text(x-15,y-110,"idleTimer" + string(myWorker.idleTimer));     
    }
    if (myWorker.state == 'building'){
        draw_text(x-15,y-190,"workTimer_" + string(myWorker.workTimer));  
        draw_text(x-15,y-180,"gettingResources_" + string(myWorker.gettingResources)); 
        draw_text(x-15,y-170,"goingTo_" + string(myWorker.goingTo)); 
    }
    draw_set_colour(c_purple); 
    draw_point(x,y+24); 
    draw_set_colour(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
