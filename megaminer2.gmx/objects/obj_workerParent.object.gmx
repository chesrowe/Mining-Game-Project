<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General
dir = 0;
state = 'idle';
BloodColor = 'red';
gold = 1;
stone = 0;
goingTo = 1;
comingFrom = 0;
beingAttacked = 0;
animationSpeed = .1;
beingAttacked = 0;
attacker = 0;
knockBackTimer = 0;
knockBack = 0;
numberTimer = 0;
number = 0;
dying = 0;
selecting = 0;
target = 0;
myDraw = instance_create(x,y,obj_workerDraw);
myDraw.myWorker = id;
image_speed = 0;

//Stats
hp = 100;
hpBar = instance_create(x,y,obj_enemyHpDraw);
hpBar.myEnemy = id;
hpBar.hp = hp;
hpBar.hpMult = (hp/10);
level = 1;
walkSpeed = 1;

//Resources
goldHeld = 0;
maxGold = 40;

stoneHeld = 0;
maxStone = 40;

brimstoneHeld = 0;
maxBrimstone = 20;

crystalHeld = 0;
maxCrystal = 20;

mushroomHeld = 0;
maxMushroom = 20;

//mining
miningTime = 300;
miningTimer = 0;
mineStart = 0;

//Sprites
spriteWalkingLeftEmpty = spr_miner1RegLeftWalkingEmpty;
spriteWalkingLeftFull = spr_miner1RegLeftWalkingFull;
spriteWalkingRightEmpty = spr_miner1RegRightWalkingEmpty;
spriteWalkingRightFull = spr_miner1RegRightWalkingFull;
spriteMiningLeft = spr_miner1RegLeftMining;
spriteMiningRight = spr_miner1RegRightMining;

//Sounds

//variables
soundPosition = 0;
pickSoundTimer = 0;
soundYDiff = 0;
soundXDiff = 0;

//8 round robins for pick sounds
pickSound[0] = sd_pickaxe1; 
pickSound[1] = sd_pickaxe2;
pickSound[2] = sd_pickaxe3;
pickSound[3] = sd_pickaxe4;
pickSound[4] = sd_pickaxe5;
pickSound[5] = sd_pickaxe6;
pickSound[6] = sd_pickaxe7;
pickSound[7] = sd_pickaxe1;

//Footstep sounds

//4 round robins for footsteps
footStepSound[0] = 0;
footStepSound[1] = 0;
footStepSound[2] = 0;
footStepSound[3] = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound

//sets the distance between the listener position and the workers
/*
soundXDiff = -((x - (view_xview[0]+640))*11);
soundYDiff = (y - (view_yview[0]+360));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mining
if (!dying){
    //sets point direction to target resource
    dir = point_direction(x,y,target.x,target.y);
    
    if (state == 'mining'){
        image_speed = .1;
        //Miners walks to the resource to mine it
        if (target.x &gt; x &amp;&amp; !mineStart &amp;&amp; goingTo){
            sprite_index = spriteWalkingRightEmpty;
            x += walkSpeed;
        }else if(!mineStart &amp;&amp; goingTo){
            sprite_index = spriteWalkingLeftEmpty;
            x -= walkSpeed;
        }
        //Starts the miner to mining
        if (mineStart){
            miningTimer ++;
            pickSoundTimer ++;
            if (pickSoundTimer &gt;= 40){
                audio_play_sound_at(pickSound[irandom(7)],x,y,0,1000,200,1,0,100);
                part_particles_create(global.partMining,x+lengthdir_x(20,dir),y,global.partStoneChips,10);
                pickSoundTimer = 0;
            }
            //Makes miner take the reousces to the stockpile
            if (miningTimer &gt;= miningTime){
                goingTo = 0;
                comingFrom = 1;
                mineStart = 0;
                miningTimer = 0;
                switch(target.resource){
                    case 'gold': goldHeld = maxGold; break;
                    case 'stone': stoneHeld = maxStone; break;
                    case 'crystal': crystalHeld = maxCrystal; break;
                    case 'brimstone': brimstoneHeld = maxBrimstone; break;
                }
            }
        }
        //Sets the miner going towards the stockpile
        if (comingFrom &amp;&amp; x &lt; obj_townCenter.x){
            sprite_index = spriteWalkingRightFull;
            x += walkSpeed;    
        }else if (comingFrom){
            sprite_index = spriteWalkingLeftFull;
            x -= walkSpeed;
        }
    
    }    

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fighting

if (!dying){
  //When the miner is being attacked
    if (beingAttacked){
        miningTimer = 0;
        mineStart = 0;
        if (knockBack){
            knockBackTimer ++;
            if (knockBackTimer &lt; 20){
                if (attacker.x &gt; x){
                    x -= .8;
                }else{
                    x += .8;
                }
            }else{
                knockBack = 0;
                knockBackTimer = 0;
            }
        }    
    }else{
        knockBackTimer = 0;
        knockBack = 0;
    }
        
    if (numberTimer &gt;= 1){
        numberTimer ++;
        if (numberTimer &gt;= 10){
            dmgNumber = instance_create(x,y-10,obj_enemyDrawCon);
            dmgNumber.myEnemy = id;
            dmgNumber.dmg = attacker.dmg;
            numberTimer = 0;
            hp -= attacker.dmg;
            part_particles_create(global.partEnemyBlood,x,y,global.partBloodRed,20);
        }
    }
}else{
    image_speed = 0;
    image_alpha -= .01;
    if (image_alpha &lt;= 0){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_townCenter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give resources

// Adds the resources and sets the miner back to mining
if (state == 'mining' &amp;&amp; comingFrom){
    global.goldP1 += goldHeld;
    global.stoneP1 += stoneHeld;
    global.crystalP1 += crystalHeld;
    global.brimstoneP1 += brimstoneHeld;
    global.mushroomP1 += mushroomHeld;
    
    number = instance_create(x,y,obj_workerDrawTimed);
    number.myWorker = id;
    //sets the amount of resources to display
    if (crystalHeld &gt; 0){
        number.amount = crystalHeld;
    }
    if (goldHeld &gt; 0){
        number.amount = goldHeld;
    }
    if (stoneHeld &gt; 0){
        number.amount = stoneHeld;
    }
    if (brimstoneHeld &gt; 0){
        number.amount = brimstoneHeld;
    }
    
    mushroomHeld = 0;
    goldHeld = 0;
    stoneHeld = 0;
    crystalHeld = 0;
    brimstoneHeld = 0;
    
    comingFrom = 0;
    goingTo = 1;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_resourceParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mine
//Starts the worker mining

if (state == 'mining' &amp;&amp; other.id == target &amp;&amp; goingTo){
    mineStart = 1; 
    goingTo = 0;
    comingFrom = 0; 
    //set the proper sprite
    if (x &gt; target.x){
        sprite_index = spriteMiningLeft;
    }else{
        sprite_index = spriteMiningRight;
    }  
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///being attacked
beingAttacked = 1;
knockBack = 1;
attacker = other.id;

//minerTimer = 1;
numberTimer = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select
global.workerSelected = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,19</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
