<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_dupeParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General
layer = 'surface';
dir = 0;
state = STATES_WORKER.idle;
substate = SUBSTATES_WORKER.none;
BloodColor = 'red';
slot = 0;
beingAttacked = 0;
animationSpeed = .3;
beingAttacked = 0;
attacker = 0;
knockBackTimer = 0;
knockBack = 0;
numberTimer = 0;
number = 0;
dying = 0;
selecting = 0;
selected = 0;
moveToTime = 2 + irandom(6);
moveToTimer = 0;
target = noone;
targetType = 0;
moveTargetX = 0;
moveTargetY = 0;
moveXStart = 0;
image_speed = 0;
image_alpha = 1;
resourceDir = 0; //-1 = move left , 1 = move right
positionTimer = 0;
positionTime = 20;
idleTimer = 0;
insideSelectBox = 0;
insideSelectBoxAlt = 0;
middleTime = 0;
run = 0;
hillStart = 0;
waitingToWorkTimer = 0;
waitingToWorkTime = irandom(10);




//Stats
hp = 100;
hpMax = 100;
maxStamina = 400;
stamina = maxStamina;
staminaRegen = 0;
staminaTimer = 0;
level = 1;
woodcuttingLevel = 100;
miningLevel = 1;
farmingLevel = 1;
transportingLevel = 1;
xpOverall = 0;
xpNeededOverall = floor(level + 300 * power(2, (level / 7)));;
xpNeededWoodcutting = floor(woodcuttingLevel + 300 * power(2,(woodcuttingLevel / 7)));;
xpNeededMining = floor(miningLevel + 300 * power(2, (miningLevel / 7)));;
xpNeededFarming = floor(farmingLevel + 300 * power(2, (farmingLevel / 7)));;
xpWoodcutting = 0;
xpMining = 0;
xpFarming = 0;
hpBar = instance_create(x,y,obj_enemyHpDraw);
hpBar.myEnemy = id;
hpBar.hp = hp;
hpBar.hpMult = (hp / 10);
walkSpeed = .5;
walkSpeedHill = .8;
leveled = 0;

//Dev mode
showDebug = 0; 

//Working general
workingLenDirX = lengthdir_x(40 ,point_direction(x,y,x,y));
workingLenDirY = lengthdir_y(26 ,point_direction(x,y,x,y));
walkingImageSpeed = .12;
drawTool = 0;
drawToolTimer = 0;
toolOut = 0;
dropOffTarget = obj_warehouse;
pickupLoad = 100;
supplyDropOff = 0;
dropOffTimer = 0;
dropX = 0;
dropY = 0;
workStart = false;
workTimer = 0;
workMiddleTime = 0;
workTime = 0;
workingSound = false;
waitingToWork = 0;
toolTime = 0;


//Building
buildingImageSpeed = .11;
baseBuildingTime = 200;
gettingResources = 0;
currentResource = -1;
drawToolTimeBuilding = 42;

//mining
baseMiningTime = 400;
mineTimeAdd = irandom(round(baseMiningTime / 3));
miningTime = (baseMiningTime + mineTimeAdd);
miningTimer = 0;
mineStart = 0;
waitingToMine = 0;
mineAmount = 40;
miningLevel = 1;
middleTimeMining = (2 + irandom(15));
miningImageSpeed = .11;
drawToolTimeMining = 42;
gemBonus = 0//(((1000) * .01) * miningLevel);



//woodcutting
falling = 0;
cuttingTimer = 0;
cutStart = 0;
move = 0;
moveTimer = 0;
woodcuttingImageSpeed = .11;
drawToolTimeWoodcutting = 42;


//Farming
baseFarmingTime = 600;
farmingTime = 600;
farmTimeAdd = irandom(round(baseFarmingTime/3));
farmingTimer = 0;
farmStart = 0;
middleTimer = 0;
middleTimeFarming = (choose(34,40,50) + irandom(80));
drawToolTimeFarming = 42;
farmingImageSpeed = .10;
waitingToFarm = 0;

//variables
soundPosition = 0;
soundYDiff = 0;
soundXDiff = 0;

falling = 1;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sound

//Variables
pickSoundTimer = 0;
footstepTimer = 0;
workRRPosition = 0;
footstepRRPosition = 0;
stepSound = 0;
footStepSound = -4;

//4 round robins for pick sounds
pickSound[0] = sd_pickaxe1; 
pickSound[1] = sd_pickaxe2;
pickSound[2] = sd_pickaxe3;
pickSound[3] = sd_pickaxe4;

//Footstep sounds

//4 RR for woodcutting
woodcutSound[0] = sd_woodcut1; 
woodcutSound[1] = sd_woodcut2; 
woodcutSound[2] = sd_woodcut3; 
woodcutSound[3] = sd_woodcut4; 

//4 RR for grass footsteps
footstepGrassSound[0] = sd_footstepGrass1; 
footstepGrassSound[1] = sd_footstepGrass2; 
footstepGrassSound[2] = sd_footstepGrass3; 
footstepGrassSound[3] = sd_footstepGrass4; 

//4 RR for ground footsteps
footstepGroundSound[0] = sd_footstepGround1; 
footstepGroundSound[1] = sd_footstepGround2; 
footstepGroundSound[2] = sd_footstepGround3; 
footstepGroundSound[3] = sd_footstepGround4; 

//4 RR for ground footsteps
footstepIceSound[0] = sd_footstepIce1; 
footstepIceSound[1] = sd_footstepIce2; 
footstepIceSound[2] = sd_footstepIce3; 
footstepIceSound[3] = sd_footstepIce4; 

//4 RR for farming
farmingSound[0] = sd_farming1; 
farmingSound[1] = sd_farming2; 
farmingSound[2] = sd_farming3; 
farmingSound[3] = sd_farming4; 

//4 RR for pulling out tool
pullOutToolSound[0] = sd_toolPullOut1; 
pullOutToolSound[1] = sd_toolPullOut2; 
pullOutToolSound[2] = sd_toolPullOut3; 
pullOutToolSound[3] = sd_toolPullOut4; 
 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites

//Putting sprite indexes into variables so that we can change the sprites on the go without changing the code that changes the sprites
idleImageSpeed = .09;

spriteIdle = spr_workerIdle;

spriteSittingDown = spr_workerSittingDown;

spriteWalking = spr_workerWalking;

spriteWalkingResources = spr_workerWalkingResources;

spriteRunning = spr_workerRunning;

spriteMining = spr_workerMining;

spriteMiningDrawTool = spr_workerMiningDrawTool;

spriteWoodcutting = spr_workerWoodcuting;

spriteWoodcuttingDrawTool = spr_workerWoodcutingDrawTool;

spriteFarming = spr_workerFarming;

spriteFarmingDrawTool = spr_workerFarmingDrawTool;

spriteBuilding = spr_workerBuilding;

spriteBuildingDrawTool = spr_workerBuildingDrawTool;

spritePickUp = spr_workerPickup;

spriteDropResources = spr_workerDropResources; 

spriteDamageFrame = spr_workerDamageFrame;

spriteDying = spr_workerDying;




sprite_index = spriteIdle;
image_speed = idleImageSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Setup

//Tool slots setup
//inv[?,0] = name
//inv[?,1] = type
//inv[?,2] = gem socket
//inv[?,3] = gem bonus 1 
//inv[?,4] = gem bonus 2 
//inv[?,5] = gem bonus 3 
//inv[?,6] = amount 
//First three slots are the tool slots pickaxe - hatchet - hoe
//slot 1
inv[0,0] = "Iron Pickaxe";
inv[0,1] = "tool";
inv[0,2] = -1;
inv[0,3] = -1;
inv[0,4] = -1;
inv[0,5] = -1;
//slot 2
inv[1,0] = "Iron Hatchet";
inv[1,1] = "tool";
inv[1,2] = -1;
inv[1,3] = -1;
inv[1,4] = -1;
inv[1,5] = -1;
//slot 3
inv[2,0] = "Iron Hoe";
inv[2,1] = "tool";
inv[2,2] = -1;
inv[2,3] = -1;
inv[2,4] = -1;
inv[2,5] = -1;
//slot 4
inv[3,0] = -1;
inv[3,1] = -1;
inv[3,2] = -1;
inv[3,3] = -1;
inv[3,4] = -1;
inv[3,5] = -1;
inv[3,6] = -1;

//Resource slot

resourceSlotMax = 100; //the maximum amount the slot can hold
resourceSlot[0,0] = RESOURCES.nothing; //Resource ID
resourceSlot[0,1] = 0; //Amount

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug stuff
windowOpen = 0;
windowObject = obj_uiDebugWindowWorker;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling 
// y = y + lengthdir_y(2,70); 
//x = x + lengthdir_x(2,70); 

if (falling){
    if (place_meeting(x, y + 3, obj_groundParent)){
        falling = 0;
        if (place_meeting(x, y + 3, obj_tileSurfaceFlatParent) &amp;&amp; !place_meeting(x, y, obj_tileSurfaceHillParent)){
            y = (instance_place(x, y + 3, obj_tileSurfaceFlatParent).y) - 12;
        }
    }else if (!hillStart &amp;&amp; !place_meeting(x, y, obj_tileSurfaceHillParent)){
        falling = 1;
    }
}else if (!place_meeting(x, y + 3, obj_groundParent) &amp;&amp; !hillStart){
    falling = 1;
}

//when the worker is falling 
if (falling){
    gravity = 0.2;
}else{
    gravity = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to target
if (state == STATES_WORKER.moveToTarget &amp;&amp; !global.workerBuild){
    moveToTimer ++;
    image_speed = walkingImageSpeed;
}

if (state == STATES_WORKER.moveToTarget &amp;&amp; !global.workerBuild &amp;&amp; moveToTimer &gt;= moveToTime){
    scr_unit_move_avoiding(walkSpeed, run, scr_unit_dir_x(moveTargetX));
    if (run &amp;&amp; scr_worker_resource_slot_is_empty()){
        sprite_index = spriteRunning;
    }else{
        if (scr_worker_resource_slot_is_empty()){
            sprite_index = spriteWalking;
        }else{
            sprite_index = spriteWalkingResources;
        }
    }
}


//Stop when the target is reached
if (state == STATES_WORKER.moveToTarget &amp;&amp; ceil(point_distance(x, y, moveTargetX, y)) &lt;= 1 &amp;&amp; moveToTimer &gt; moveToTime){
    state = STATES_WORKER.idle;
    run = 0;
    moveToTimer = 0;
    image_speed = idleImageSpeed;
    sprite_index = spriteIdle;
    idleTimer = 0;
    scr_unit_change_substate(SUBSTATES_WORKER.none);
    if (moveXStart == 'less'){
        scr_sprite_face_right();
    }else{
        scr_sprite_face_left();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound

//footsteps
if (state != "idle"){
    if (substate == SUBSTATES_WORKER.resourcePickup || substate == SUBSTATES_WORKER.goingTo || substate == SUBSTATES_WORKER.resourceDropOff || state == STATES_WORKER.moveToTarget){
        if (round(image_index) == 1 &amp;&amp; stepSound == 0 || round(image_index) == 5 &amp;&amp; stepSound == 0){
            randomize();
            if (!audio_is_playing(footstepGrassSound[footstepRRPosition])){
                footStepSound = audio_play_sound_at(footstepGrassSound[footstepRRPosition],x,y,0,1000,200,1,0,1);  
            }
            audio_sound_pitch(footStepSound,random_range(.90,1.3));
            audio_sound_gain(footStepSound, global.sfxVol,0);
            footstepRRPosition ++;
            if (footstepRRPosition &gt; 3){
                footstepRRPosition = irandom(2);
            }       
            stepSound = 1;
        } 
        
        if (round(image_index) != 1 &amp;&amp; round(image_index) != 5){
            stepSound = 0;
        }
    }
    //Pulling out tool
    if (drawTool &amp;&amp; drawToolTimer == 0){
        var sound = audio_play_sound_at(pullOutToolSound[irandom(3)],x,y,0,1000,200,1,0,5);
        audio_sound_gain(sound,global.sfxVol,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fighting

if (!dying){
  //When the miner is being attacked
    if (beingAttacked){
        miningTimer = 0;
        mineStart = 0;
        if (knockBack){
            knockBackTimer ++;
            if (knockBackTimer &lt; 20){
                if (attacker.x &gt; x){
                    x -= .8;
                }else{
                    x += .8;
                }
            }else{
                knockBack = 0;
                knockBackTimer = 0;
            }
        }    
    }else{
        knockBackTimer = 0;
        knockBack = 0;
    }
        
    if (numberTimer &gt;= 1){
        numberTimer ++;
        if (numberTimer &gt;= 10){
            dmgNumber = instance_create(x,y-10,obj_enemyDrawCon);
            dmgNumber.myEnemy = id;
            dmgNumber.dmg = attacker.dmg;
            numberTimer = 0;
            hp -= attacker.dmg;
            part_particles_create(global.partEnemyBlood,x,y,global.partBloodRed,20);
        }
    }
}else{
    image_speed = 0;
    image_alpha -= .01;
    if (image_alpha &lt;= 0){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select box



if (global.select &amp;&amp; selected == 0){
    insideSelectBox = point_in_rectangle(x,y,global.selectStartX,global.selectStartY,mouse_x,mouse_y);
    insideSelectBoxAlt = point_in_rectangle(x,y,mouse_x,mouse_y,global.selectStartX,global.selectStartY);
    var insideSelectBoxAlt2 = point_in_rectangle(x, y, mouse_x, global.selectStartY, mouse_x + (global.selectStartX - mouse_x), mouse_y);
    var insideSelectBoxAlt3 = point_in_rectangle(x, y, mouse_x + (global.selectStartX - mouse_x), mouse_y, mouse_x, global.selectStartY);
    if (insideSelectBox || insideSelectBoxAlt || insideSelectBoxAlt2 || insideSelectBoxAlt3){
        global.selectedNumber ++;
        global.unitSelected[global.selectedNumber - 1] = id;
        selected = 1;
    }
}

if (global.select &amp;&amp; selected == 1){
    if (!insideSelectBox &amp;&amp; !insideSelectBoxAlt &amp;&amp; !insideSelectBoxAlt2 &amp;&amp; !insideSelectBoxAlt3){
        selected = 0;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multi-click select

//State select
if (global.workerStateSelect == 1 &amp;&amp; state == global.workerSelectState &amp;&amp; (distance_to_point((view_wview[0]/2), y &lt; 2000)) &amp;&amp; selected == 0){
    global.selectedNumber ++;
    global.unitSelected[global.selectedNumber - 1] = id;
    selected = 1;
}

//select all
if (global.workerSelectAll &amp;&amp; distance_to_point((view_wview[0]/2),y) &lt;= 2000 &amp;&amp; selected == 0){
    global.selectedNumber ++;
    global.unitSelected[global.selectedNumber - 1] = id;
    selected = 1;                
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Idle/Sitting

//Make the worker sit down after they have stayed idle for while
if (state == STATES_WORKER.idle &amp;&amp; substate != SUBSTATES_WORKER.sitting){
    sprite_index = spriteIdle;
    idleTimer ++;
    if (idleTimer &gt;= 600){
        scr_unit_change_substate(SUBSTATES_WORKER.sitting);      
    }   

}













</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina regen

if (!run &amp;&amp; stamina &lt; maxStamina){
    staminaTimer ++;
    if (staminaTimer &gt;= 180){
        staminaRegen = 1;
        stamina ++;
    }
}

if (staminaRegen &amp;&amp; stamina == maxStamina){
    staminaRegen = 0;    
    staminaTimer ++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Snap worker to ground

//If the worker is not falling and it is supposed be on the ground, put it there.
if (!falling &amp;&amp; place_meeting(x, y + 4, obj_tileSurfaceFlatParent) &amp;&amp; !place_meeting(x, y, obj_tileSurfaceHillParent)){
    var tileUnderneath = instance_place(x, y + 4, obj_tileSurfaceFlatParent);
    y = tileUnderneath.y - 12;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Substates 

if (substate != SUBSTATES_WORKER.none){
    switch(substate){
        //goingTo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        case SUBSTATES_WORKER.goingTo:
             //If the target ceases to exist while the worker is going to, find the worker a new target.
            if (!instance_exists(target)){
                switch(state){
                    //woodcutting
                    case STATES_WORKER.woodcutting:
                        target = instance_nearest(x, y, obj_treeParent);
                        scr_unit_change_substate(SUBSTATES_WORKER.goingTo);    
                    break;
                }
            
            }
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                //Walk toward target
                if (instance_exists(target)){
                    image_speed = walkingImageSpeed;
                    scr_unit_move_avoiding(walkSpeed, 0, scr_unit_dir_x((target.x + target.orgXAdd)));
                }
            }else{
                image_speed = 0;
            }
            //Middle timer stuff
            if (scr_worker_is_working() &amp;&amp; instance_exists(target)){ 
                if (scr_find_x_diff(x, (target.x + target.orgXAdd)) &lt; target.midDistance){
                    middleTimer ++;
                }
            }
            
            //Set the state specific level reqs
            switch(state){
                //Woodcutting
                case STATES_WORKER.woodcutting:
                    var skillLevel = woodcuttingLevel;
                break;
                
                //Mininig
                case STATES_WORKER.mining:
                    var skillLevel = miningLevel;
                break;
                
                //Farming
                case STATES_WORKER.farming:
                    var skillLevel = 1;
                break;
                
                //Building
                case STATES_WORKER.building:
                    var skillLevel = 1;
                break;
                
                //Upgrading
                case STATES_WORKER.upgrading:
                    var skillLevel = 1;
                break;
            }
            
            //General middleTime stuff \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
            if (scr_worker_is_working() &amp;&amp; instance_exists(target) &amp;&amp; (scr_find_x_diff(x, (target.x + target.orgXAdd)) &lt; target.midDistance)){
                if ((middleTimer &gt;= middleTime) &amp;&amp; skillLevel &gt;= target.levelReq){
                    //If the worker state is mining or farming, make sure the resource isn't exhausted
                    if ((state == STATES_WORKER.mining || state == STATES_WORKER.farming) &amp;&amp; !target.exhausted){ 
                        scr_unit_change_substate(SUBSTATES_WORKER.toolPullout); 
                    }else if (state == STATES_WORKER.mining || state == STATES_WORKER.farming){
                        scr_unit_change_substate(SUBSTATES_WORKER.waitingToWork);
                    }  
                    //If the worker state is building/upgrading
                    if (state == STATES_WORKER.building || state == STATES_WORKER.upgrading){
                        scr_unit_change_substate(SUBSTATES_WORKER.toolPullout);    
                    }
                    //Woodcutting
                    if (state == STATES_WORKER.woodcutting){
                        scr_unit_change_substate(SUBSTATES_WORKER.toolPullout);     
                    }
                }else if (skillLevel &lt; target.levelReq){
                    middleTimer = 0;
                    state = STATES_WORKER.idle;
                    var msg = instance_create(x, y, obj_workerDrawTimed);
                    msg.col = c_red;
                    msg.amount = "Can't do that."
                    image_speed = idleImageSpeed;
                    sprite_index = spriteIdle;    
                }  
                if (workingSound){
                    target.animationTimer = 0;
                }
            }
        break;    
        
        //toolPullOut \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        case SUBSTATES_WORKER.toolPullout:
            var toolTime, workSprite;
            //Get the animation times and sprites for the state of the worker
            switch(state){
                case STATES_WORKER.woodcutting:
                    toolTime = drawToolTimeWoodcutting;
                    sprite_index = spriteWoodcuttingDrawTool;
                break;
                
                case STATES_WORKER.mining:
                    toolTime = drawToolTimeMining;
                    sprite_index = spriteMiningDrawTool;
                break;
                
                case STATES_WORKER.farming:
                    toolTime = drawToolTimeFarming;
                    sprite_index = spriteFarmingDrawTool;
                break;
                
                case STATES_WORKER.building:
                    toolTime = drawToolTimeBuilding;
                    sprite_index = spriteBuildingDrawTool;
                break;
                
                case STATES_WORKER.upgrading:
                    toolTime = drawToolTimeBuilding;
                    sprite_index = spriteBuildingDrawTool;
                break;
            }
            if (instance_exists(target)){
                scr_sprite_face_xpoint(target.x);
            }
            //Make the worker pull out its tool
            //Play the sound
            if (image_index == 3){
                audio_play_sound_at(pullOutToolSound[irandom(3)], x, y, 0, 1000, 200, 1, 0, 10);    
            }
            drawToolTimer ++;
            if (instance_exists(target)){
                if (drawToolTimer &gt;= toolTime){
                    //play sound
                    drawTool = 0;
                    drawToolTimer = 0;
                    dir = point_direction(x, y, target.x, target.y);
                    //Make the worker start working
                    scr_unit_change_substate(SUBSTATES_WORKER.working);
                }
            }
            //If the target ceases to exist while the worker is going to, find the worker a new target.
            if (!instance_exists(target)){
                switch(state){
                    //woodcutting
                    case STATES_WORKER.woodcutting:
                        target = instance_nearest(x, y, obj_treeParent);
                        scr_unit_change_substate(SUBSTATES_WORKER.goingTo);    
                    break;
                }
            
            }
        break;
        
        //Working \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        case SUBSTATES_WORKER.working:
            workTimer ++; 
            
            //If the target ceases to exist while the worker is working, find the worker a new target.
            if (!instance_exists(target)){
                switch(state){
                    //woodcutting
                    case STATES_WORKER.woodcutting:
                        target = instance_nearest(x, y, obj_treeParent);
                        scr_unit_change_substate(SUBSTATES_WORKER.goingTo);    
                    break;
                }
            
            }
            if (state == STATES_WORKER.woodcutting &amp;&amp; target.falling){
                waitingToWorkTimer ++;
                if (waitingToWorkTimer &gt;= waitingToWorkTime){
                    scr_unit_change_substate(SUBSTATES_WORKER.waitingToWork);    
                }
            }
            
            //Sounds
            if (instance_exists(target) &amp;&amp; round(image_index) == target.hitFrame &amp;&amp; workingSound == false){
                //Create particles for the tool hiting the resource
                dir = point_direction(x, y, target.x, target.y);
                part_particles_create(global.partMining, x + lengthdir_x(16, dir), y, global.partWoodChips, 10);
                //Play the sound of the tool hiting the resource
                workSound = audio_play_sound_at(target.toolSound[workRRPosition], x, y, 0, 1000, 200, 1, 0, workRRPosition); 
                audio_sound_gain(workSound, global.sfxVol, 0);
                audio_sound_pitch(workSound, random_range(.95, 1.2)); 
                //Increment the RR of the tool sounds
                workRRPosition ++;
                if (workRRPosition &gt; 3){
                    workRRPosition = irandom(2);
                }
                workingSound = true; 
                if (state == STATES_WORKER.woodcutting){
                    target.beingCut = true;
                    target.animationTimer = 0;
                }
            }   
            
            //Stop the sound from playing when it's not the hit frame of the sprite
            if (instance_exists(target) &amp;&amp; round(image_index) != target.hitFrame){
                workingSound = 0;
            }
            if ((state == STATES_WORKER.mining || state == STATES_WORKER.farming) &amp;&amp; target.exhausted){
                waitingToWorkTimer ++;
                if (waitingToWorkTimer &gt;= waitingToWorkTime){
                    scr_unit_change_substate(SUBSTATES_WORKER.waitingToWork);
                }
            }
            
            //Make the worker take the resources to the warehouse
            if (workTimer &gt;= workTime &amp;&amp; instance_exists(target)){
                   if (state != STATES_WORKER.building &amp;&amp; state != STATES_WORKER.upgrading){
                        scr_unit_change_substate(SUBSTATES_WORKER.resourceDropOff);
                        target.resourceLeft -= resourceSlotMax;
                    }else{
                        //Take the resources the worker was building/upgrading with away
                        if (state == STATES_WORKER.upgrading){
                            for (i = 0; i &lt; 3; i++){
                                if (target.upgradeCost[i,0] == currentResource){
                                    target.upgradeCost[i,2] -= resourceSlot[0,1];
                                    target.amountUpgraded += resourceSlot[0,1];
                                    resourceSlot[0,0] = RESOURCES.nothing;
                                    resourceSlot[0,1] = 0;
                                    currentResource = -1;
                                    break;
                                 
                                } 
                            }
                        }
                        //Building
                        if (state == STATES_WORKER.building){
                            for (i = 0; i &lt; 3; i++){
                                if (target.cost[i,0] == currentResource){
                                    target.cost[i,2] -= resourceSlot[0,1];
                                    target.amountBuilt += resourceSlot[0,1];
                                    resourceSlot[0,0] = RESOURCES.nothing;
                                    resourceSlot[0,1] = 0;
                                    currentResource = -1;
                                    break;
                                }   
                            }
                        }
                    
                        
                        
                        //Make the worker go pick up more resources to build with
                        scr_unit_change_substate(SUBSTATES_WORKER.resourcePickup);
                        resourceSlot[0,0] = RESOURCES.nothing;
                        resourceSlot[0,1] = 0;
                    }
                    //If the target is a tree decrement the fall variable in it
                    if (object_is_ancestor((target).object_index, obj_treeParent)){
                        target.fall -= 100;    
                    }      
                    moveToTimer = 0;
                    //pops up xp gained
                    with(instance_create(x, y, obj_workerDrawTimed)){
                        amount = ("+" + string((other.target).xp) + "XP");
                        col = c_yellow;
                        myWorker = other.id;
                    }
                    //If the worker is already over the warehouse stop the middletimer 
                    if (place_meeting(x, y, obj_warehouse)){
                        middleTimer = middleTime;
                    }
                    //Put the just worked resources into the inventory
                    if (state != STATES_WORKER.building &amp;&amp; state != STATES_WORKER.upgrading){
                        resourceSlot[0,0] = target.resource
                        resourceSlot[0,1] = resourceSlotMax;
                    }
                    //Levels the worker up if he has enough XP
                    /*if (xpWoodcutting &gt;= xpNeededWoodcutting){
                        with(instance_create(x, y, obj_workerDrawTimed)){
                            myWorker = other.id;
                            amount = "Level Up!";
                            col = c_yellow;
                        }
                        woodcuttingLevel ++;
                        xpNeededWoodcutting += floor(woodcuttingLevel+300 * power(2,(woodcuttingLevel/7)));
                        baseWorkTime -= (10 + irandom(5));
                    } */
                    //if warehouse is not built, make idle
                    if (!instance_exists(dropOffTarget)){
                        state = STATES_WORKER.idle;
                    }
                    //check to see if the tree is over the warehouse
                    /*if (point_distance(x, y, dropOffTarget.x, dropOffTarget.y) &lt; 10){
                        middleTimer = 50;
                    } */
                }
                //If the worker is building or upgrading a sturcture and the structure is built make the worker go idle
                if (state == STATES_WORKER.building &amp;&amp; target.built){
                    state = STATES_WORKER.idle;
                    scr_unit_change_substate(SUBSTATES_WORKER.none);
                }
                if (state == STATES_WORKER.upgrading &amp;&amp; !target.upgrade){
                    state = STATES_WORKER.idle;
                    scr_unit_change_substate(SUBSTATES_WORKER.none);
                }
        break;
        
        //resourceDropOff \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        case SUBSTATES_WORKER.resourceDropOff:
            //Make the worker walk toward the dropOffTarget
            if (instance_exists(dropOffTarget)){
                if (middleTimer &lt; middleTime){
                    moveToTimer ++;
                    scr_unit_move_avoiding(walkSpeed, 0, scr_unit_dir_x(dropOffTarget.x));
                    sprite_index = spriteWalkingResources;   
                }
                //Collision with the warehouse
                if (place_meeting(x, y, dropOffTarget)){
                    if (instance_exists(target) &amp;&amp; x == target.x){
                        middleTimer = middleTime;
                    }
                    //Start the middle timer
                    middleTimer ++;
                    if (middleTimer == (middleTime - 1)){
                        dropX = x;
                        dropY = y;
                        image_index = 0;
                        sprite_index = spriteDropResources;
                        image_speed = 0;
                    }else if (middleTimer &gt; middleTime){
                        image_speed = .10;
                        sprite_index = spriteDropResources;
                        scr_sprite_face_xpoint(dropOffTarget.x); 
                        //Add the resources to the dropoff target
                        if (image_index &gt;= 6){
                            switch (resourceSlot[0,0]){
                                //Wood common
                                case RESOURCES.woodCommon:
                                    global.woodCommon += resourceSlotMax;
                                break;
                                //Wood oak
                                case RESOURCES.woodOak:
                                    global.woodOak += resourceSlotMax;
                                break;
                                //Wood birch
                                case RESOURCES.woodBirch:
                                    global.woodBirch += resourceSlotMax;
                                break;
                                //Stone
                                case RESOURCES.stone:
                                    global.stone += resourceSlotMax;
                                break;
                                //Gold
                                case RESOURCES.oreGold:
                                    global.gold += resourceSlotMax;
                                break;
                                //Food
                                case RESOURCES.food:
                                    global.food += resourceSlotMax;
                                break;
                            }
                            resourceSlot[0,0] = RESOURCES.nothing;
                            resourceSlot[0,1] = 0;
                            //Set the worker going back to the target if the worker is working
                            if (scr_worker_is_working()){
                                if (instance_exists(target)){
                                    scr_unit_change_substate(SUBSTATES_WORKER.goingTo);
                                }else if (state == STATES_WORKER.woodcutting){
                                    //If the tree has been cut down, find the worker a new tree
                                    target = instance_nearest(x, y, obj_treeParent);
                                    scr_unit_change_substate(SUBSTATES_WORKER.goingTo);
                                }
                            }else{
                                scr_unit_change_substate(SUBSTATES_WORKER.none);
                                state = STATES_WORKER.idle;
                            }
                        }    
                    }   
                }
            }
        break;
        
        //resourcePosition\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        case SUBSTATES_WORKER.resourcePosition:
            //Start the movement
            positionTimer ++;
            scr_unit_move_avoiding(walkSpeed, 0, -(resourceDir)); 
            sprite_index = spriteWalking;
            // stop the movement
            if (positionTimer &gt;= positionTime){
                positionTimer = 0;  
                //Make the worker go toward the target again or start working
                if (scr_find_x_diff(x, target.x + target.orgXAdd) &gt; target.midDistance){
                    scr_unit_change_substate(SUBSTATES_WORKER.goingTo);
                }else{
                    scr_unit_change_substate(SUBSTATES_WORKER.toolPullout);
                }
            } 
        break;
        
        //Sitting/////////////////////////////////////////////////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        case SUBSTATES_WORKER.sitting:
            sprite_index = spriteSittingDown;
            //Make sure the animation stops on the sitting frame    
            if (image_index &gt;= 5){
                image_speed = 0;
                image_index = 5;
            }    
        break;  
        
        //ResourcePickup/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  
        case SUBSTATES_WORKER.resourcePickup:
            //Make the worker walk toward the dropOffTarget
            if (instance_exists(dropOffTarget)){
                //Check to make sure the building still needs to be built/upgraded
                if (state == STATES_WORKER.building){
                    if (target.built){
                        scr_unit_change_substate(SUBSTATES_WORKER.none);
                        state = STATES_WORKER.idle;   
                    }
                }
                if (state == STATES_WORKER.upgrading){
                    if (!target.upgrade){
                        scr_unit_change_substate(SUBSTATES_WORKER.none);
                        state = STATES_WORKER.idle;       
                    }
                }
                //Worker walk to dropOffTarget
                if (middleTimer &lt; middleTime){
                    moveToTimer ++;
                    if (instance_exists(target) &amp;&amp; (x == dropOffTarget.x)){
                        middleTimer = middleTime;
                    }
                    scr_unit_move_avoiding(walkSpeed, 0, scr_unit_dir_x(dropOffTarget.x));
                    //sprite_index = spriteWalking;   
                }
                //Collision with the warehouse
                if (place_meeting(x, y, dropOffTarget)){
                    //Check the middle timer
                    if (middleTimer == middleTime){
                        middleTimer ++;
                        dropX = x;
                        dropY = y;
                        image_index = 0;
                        image_speed = 0;
                    }else if (middleTimer &gt; middleTime){
                        //Check the resourceSlot for resources and deposit them if there are any
                        if (resourceSlot[0,0] != RESOURCES.nothing){
                            scr_worker_resource_slot_deposit(resourceSlotMax);
                        }
                        image_speed = .10;
                        //sprite_index = spriteDropResources;
                        scr_sprite_face_xpoint(dropOffTarget.x); 
                        //Add the resources needed to the worker
                        if (image_index &gt;= 2){
                            //Get the resources for building(if the state is building)
                            if (state == STATES_WORKER.building){
                                var resourceNeeded = scr_building_find_resource_needed();
                                if (resourceNeeded != noone){
                                    switch (target.cost[resourceNeeded,0]){
                                        //Wood common /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.woodCommon:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.woodCommon) &amp;&amp; (global.woodCommon &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.woodCommon;
                                                resourceSlot[0,1] = global.woodCommon;
                                                global.woodCommon = 0;
                                                currentResource = RESOURCES.woodCommon;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.woodCommon;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodCommon -= resourceSlotMax;
                                                currentResource = RESOURCES.woodCommon;
                                            }
                                        break;
                                        
                                        //Wood oak /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.woodOak:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.woodOak) &amp;&amp; (global.woodOak &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.woodOak;
                                                resourceSlot[0,1] = global.woodOak;
                                                global.woodOak = 0;
                                                currentResource = RESOURCES.woodOak;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.woodOak;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodOak -= resourceSlotMax;
                                                currentResource = RESOURCES.woodOak;
                                            }
                                        break;
                                        
                                        //Wood birch ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.woodBirch:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.woodBirch) &amp;&amp; (global.woodBirch &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.woodBirch;
                                                resourceSlot[0,1] = global.woodBirch;
                                                global.woodBirch = 0;
                                                currentResource = RESOURCES.woodBirch;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.woodBirch;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodBirch -= resourceSlotMax;
                                                currentResource = RESOURCES.woodBirch;
                                            }
                                        break;
                                        
                                        //Stone ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.stone:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.stone) &amp;&amp; (global.stone &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.stone;
                                                resourceSlot[0,1] = global.stone;
                                                global.woodStone = 0;
                                                currentResource = RESOURCES.stone;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.stone;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.stone -= resourceSlotMax;
                                                currentResource = RESOURCES.stone;
                                            }
                                        break;
                                        
                                        //Food ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.food:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.food) &amp;&amp; (global.food &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.food;
                                                resourceSlot[0,1] = global.food;
                                                global.food = 0;
                                                currentResource = RESOURCES.food;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.food;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.food -= resourceSlotMax;
                                                currentResource = RESOURCES.food;
                                            }
                                        break;
                                        
                                        //Gold ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.oreGold:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.oreGold) &amp;&amp; (global.oreGold &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.oreGold;
                                                resourceSlot[0,1] = global.oreGold;
                                                global.oreGold = 0;
                                                currentResource = RESOURCES.oreGold;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.oreGold;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodCommon -= resourceSlotMax;
                                                currentResource = RESOURCES.oreGold;
                                            }
                                        break;
                                    } //If the building still needs to be built but the resource is not available make the worker wait
                                }else if (!target.built){ 
                                    scr_unit_change_substate(SUBSTATES_WORKER.waitingToWork);
                                }
                            }
                            
                            //Get the resources for upgrading
                            if (state = STATES_WORKER.upgrading){
                                var resourceNeeded = scr_building_find_resource_needed_upgrade(target);
                                if (resourceNeeded != noone){
                                    switch (target.upgradeCost[resourceNeeded,0]){
                                        //Wood common ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.woodCommon:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.woodCommon) &amp;&amp; (global.woodCommon &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.woodCommon;
                                                resourceSlot[0,1] = global.woodCommon;
                                                global.woodCommon = 0;
                                                currentResource = RESOURCES.woodCommon;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed_upgrade() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.woodCommon;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodCommon -= resourceSlotMax;
                                                currentResource = RESOURCES.woodCommon;
                                            }
                                        break;
                                        
                                        //Wood oak //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.woodOak:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.woodCommon) &amp;&amp; (global.woodOak &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.woodOak;
                                                resourceSlot[0,1] = global.woodOak;
                                                global.woodOak = 0;
                                                currentResource = RESOURCES.woodOak;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed_upgrade() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.woodOak;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodOak -= resourceSlotMax;
                                                currentResource = RESOURCES.woodOak;
                                            }
                                        break;
                                        
                                        //Wood birch /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.woodBirch:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.woodBirch) &amp;&amp; (global.woodBirch &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.woodBirch;
                                                resourceSlot[0,1] = global.woodBirch;
                                                global.woodBirch = 0;
                                                currentResource = RESOURCES.woodBirch;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed_upgrade() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.woodBirch;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.woodCommon -= resourceSlotMax;
                                                currentResource = RESOURCES.woodBirch;
                                            }
                                        break;
                                        
                                        //Stone ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.stone:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.stone) &amp;&amp; (global.stone &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.stone;
                                                resourceSlot[0,1] = global.stone;
                                                global.stone = 0;
                                                currentResource = RESOURCES.stone;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed_upgrade() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.stone;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.stone -= resourceSlotMax;
                                                currentResource = RESOURCES.stone;
                                            }
                                        break;
                                        
                                        //Food ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.food:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.food) &amp;&amp; (global.food &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.food;
                                                resourceSlot[0,1] = global.food;
                                                global.food = 0;
                                                currentResource = RESOURCES.food;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed_upgrade() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.food;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.food -= resourceSlotMax;
                                                currentResource = RESOURCES.food;
                                            }
                                        break;
                                        
                                        //Gold ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        case RESOURCES.oreGold:
                                            //If the warehouse has less than 100 of the resource but more than 0
                                            if ((scr_building_check_amount_resources_needed() &gt; global.oreGold) &amp;&amp; (global.oreGold &lt; resourceSlotMax)){ 
                                                resourceSlot[0,0] = RESOURCES.oreGold;
                                                resourceSlot[0,1] = global.oreGold;
                                                global.oreGold = 0;
                                                currentResource = RESOURCES.oreGold;
                                            }
                                            //if the warehouse has more than 100 of the resource
                                            if (scr_building_check_amount_resources_needed_upgrade() &gt;= resourceSlotMax){
                                                resourceSlot[0,0] = RESOURCES.oreGold;
                                                resourceSlot[0,1] = resourceSlotMax;
                                                global.oreGold -= resourceSlotMax;
                                                currentResource = RESOURCES.oreGold;
                                            }
                                        break;
                                    }
                                }else if (target.upgrade){ 
                                    scr_unit_change_substate(SUBSTATES_WORKER.waitingToWork);
                                }
                            }
                            
                            //Set the worker going back to the target if the worker is working
                            if (scr_worker_is_working() &amp;&amp; resourceNeeded != noone){
                                if (instance_exists(target)){
                                    scr_unit_change_substate(SUBSTATES_WORKER.goingTo);
                                }
                            }else if (state != STATES_WORKER.building &amp;&amp; state != STATES_WORKER.upgrading){
                                scr_unit_change_substate(SUBSTATES_WORKER.none);
                                state = STATES_WORKER.idle;
                            }
                        }    
                    }   
                }
            }
        break;
        
        //waitingToBuild /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        case SUBSTATES_WORKER.waitingToWork:
            //Building state
            if (state == STATES_WORKER.building &amp;&amp; !target.built){
                if (scr_building_find_resource_needed() != -4){     
                    scr_unit_change_substate(SUBSTATES_WORKER.resourcePickup);
                }       
            }else if (state == STATES_WORKER.building &amp;&amp; target.built){
                state = STATES_WORKER.idle;
                scr_unit_change_substate(SUBSTATES_WORKER.none);
            } 
            //Upgrading state
            if (state == STATES_WORKER.upgrading &amp;&amp; target.upgrade){
                if (scr_building_find_resource_needed_upgrade(target) != -4){
                        scr_unit_change_substate(SUBSTATES_WORKER.resourcePickup);
                }       
            }else if (state == STATES_WORKER.upgrading &amp;&amp; !target.upgrade){
                state = STATES_WORKER.idle;
                scr_unit_change_substate(SUBSTATES_WORKER.none);
            } 
            //Mining/Farming state 
            if ((state == STATES_WORKER.mining || state = STATES_WORKER.farming) &amp;&amp; !target.exhausted){
                waitingToWorkTimer ++;
                if (waitingToWorkTimer &gt;= waitingToWorkTime){
                    scr_unit_change_substate(SUBSTATES_WORKER.toolPullout);
                }
            }    
            //Woodcutting
            if (state == STATES_WORKER.woodcutting &amp;&amp; instance_exists(target) &amp;&amp; target.fell){
                waitingToWorkTimer ++;
                if (waitingToWorkTimer &gt;= waitingToWorkTime){
                    scr_unit_change_substate(SUBSTATES_WORKER.toolPullout);
                }
            }   
        break;
    }
}










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tileSurfaceFlatParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Put the worker at the right y pos, when they are on flat ground


if (y != other.y - 12){
    if (!place_meeting(x,y,obj_tileSurfaceHillParent)){
        y = (other.y - 12);
    }
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///being attacked
beingAttacked = 1;
knockBack = 1;
attacker = other.id;

//minerTimer = 1;
numberTimer = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dev mode

//show debug info
if (showDebug){
    showDebug = 0;
}else{
    showDebug = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select

event_inherited();

if (!global.workerBuild &amp;&amp; !global.dev_mode_dupe &amp;&amp; !global.shiftSelect &amp;&amp; global.multiClickSelect &lt; 2){
    //clear unit array
    scr_unit_array_clear();
    global.unitSelected[0] = id;
    selected = 1;
    global.selectedNumber = 1;
    (obj_globalCon.buildButton).visible = 1;
    (obj_globalCon.workerInventoryButton).visible = 1;
    (obj_globalCon.workerSkillsButton).visible = 1;
    global.workerBuildMenu = 0;
}
if (global.shiftSelect){
    scr_unit_array_add(id);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General
draw_self();

if (selected){
    draw_sprite(spr_selectorP1, 0, x - 18, y - 16);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hp/stamina bar

//If the worker is running , draw the stamina bar
if (run || staminaRegen){
    draw_rectangle_colour(x - 3, y - 19, x + 8, y - 21, c_black, c_black, c_black, c_black,0);
    var stPercent = ((stamina / maxStamina) * 10) * 10;
    var drawPercent = round(((stPercent / 100) * 10)); 
    draw_rectangle_colour(x - 3, y - 19, (x - 3) + drawPercent, y - 21, c_green, c_green, c_green, c_green, 0);
} 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Stuff

if (windowOpen){
    draw_set_colour(c_white);
    draw_text(x - 6, y - 13, string(id));
    draw_set_colour(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,19</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
