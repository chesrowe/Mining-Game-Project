<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_dupeParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General
layer = 'surface';
dir = 0;
state = 'idle';
BloodColor = 'red';
gold = 1;
stone = 0;
goingTo = 0;
comingFrom = 0;
beingAttacked = 0;
animationSpeed = .3;
beingAttacked = 0;
attacker = 0;
knockBackTimer = 0;
knockBack = 0;
numberTimer = 0;
number = 0;
dying = 0;
selecting = 0;
selected = 0;
randomize();
moveToTime = 2 + irandom(15);
moveToTimer = 0;
target = 0;
moveTargetX = 0;
moveTargetY = 0;
moveXStart = 0;
myDraw = instance_create(x,y,obj_workerCon);
myDraw.myWorker = id;
image_speed = 0;
image_alpha = 0;
resourcePosition = 0; //1 = move left , 2 = move right
positionTimer = 0;
positionTime = 20;
idleTimer = 0;
insideSelectBox = 0;
insideSelectBoxAlt = 0;


//Stats
hp = 100;
hpMax = 100;
level = 1;
woodcuttingLevel = 1;
miningLevel = 1;
farmingLevel = 1;
transportingLevel = 1;
xpOverall = 0;
xpNeededOverall = floor(level+300 * power(2,(level/7)));;
xpNeededWoodcutting = floor(woodcuttingLevel+300 * power(2,(woodcuttingLevel/7)));;
xpNeededMining = floor(miningLevel+300 * power(2,(miningLevel/7)));;
xpNeededFarming = floor(farmingLevel+300 * power(2,(farmingLevel/7)));;
xpWoodcutting = 0;
xpMining = 0;
xpFarming = 0;
hpBar = instance_create(x,y,obj_enemyHpDraw);
hpBar.myEnemy = id;
hpBar.hp = hp;
hpBar.hpMult = (hp/10);
walkSpeed = 1;
walkSpeedHill = .8;
leveled = 0;

//Dev mode
showDebug = 0; 

//Resources
goldHeld = 0;
maxGold = 40;

stoneHeld = 0;
maxStone = 40;

brimstoneHeld = 0;
maxBrimstone = 20;

crystalHeld = 0;
maxCrystal = 20;

mushroomHeld = 0;
maxMushroom = 20;

woodHeld = 0;
maxWood = 40;

foodHeld = 0;
maxFood = 50;

//Working general
workingLenDirX = lengthdir_x(40,point_direction(x,y,target.x,target.y));
workingLenDirY = lengthdir_y(26,point_direction(x,y,target.x,target.y));
walkingImageSpeed = .12;
drawTool = 0;
drawToolTimer = 0;
toolOut = 0;
dropOffTarget = obj_warehouse;
pickupLoad = 40;
supplyDropOff = 0;
dropOffTimer = 0;
dropX = 0;
dropY = 0;

//mining
baseMiningTime = 400;
mineTimeAdd = irandom(round(baseMiningTime/3));
miningTime = (baseMiningTime + mineTimeAdd);
miningTimer = 0;
mineStart = 0;
waitingToMine = 0;
mineAmount = 40;
miningLevel = 1;
randomize();
middleTimeMining = (2 + irandom(15));
miningImageSpeed = .11;
drawToolTimeMining = 45;
gemBonus = 0//(((1000) * .01) * miningLevel);



//woodcutting
baseCuttingTime = 500;
cuttingTime = 500;
falling = 0;
cuttingTimer = 0;
cutStart = 0;
move = 0;
moveTimer = 0;
cutSound = 0;
randomize();
cutTimeAdd = irandom(round(baseCuttingTime/3));
middleTimeWoodcutting =  (2 + irandom(10));
woodcuttingImageSpeed = .11;
drawToolTimeWoodcutting = 45;


//Farming
baseFarmingTime = 600;
farmingTime = 600;
farmTimeAdd = irandom(round(baseFarmingTime/3));
farmingTimer = 0;
farmStart = 0;
middleTimer = 0;
middleTimeFarming = (choose(34,40,50) + irandom(80));
drawToolTimeFarming = 45;
farmingImageSpeed = .10;
waitingToFarm = 0;

//variables
soundPosition = 0;
soundYDiff = 0;
soundXDiff = 0;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sound

//Variables
pickSoundTimer = 0;
footstepTimer = 0;
workRRPosition = 0;
footstepRRPosition = 0;
stepSound = 0;

//4 round robins for pick sounds
pickSound[0] = sd_pickaxe1; 
pickSound[1] = sd_pickaxe2;
pickSound[2] = sd_pickaxe3;
pickSound[3] = sd_pickaxe4;

//Footstep sounds

//4 RR for woodcutting
woodcutSound[0] = sd_woodcut1; 
woodcutSound[1] = sd_woodcut2; 
woodcutSound[2] = sd_woodcut3; 
woodcutSound[3] = sd_woodcut4; 

//4 RR for grass footsteps
footstepGrassSound[0] = sd_footstepGrass1; 
footstepGrassSound[1] = sd_footstepGrass2; 
footstepGrassSound[2] = sd_footstepGrass3; 
footstepGrassSound[3] = sd_footstepGrass4; 

//4 RR for ground footsteps
footstepGroundSound[0] = sd_footstepGround1; 
footstepGroundSound[1] = sd_footstepGround2; 
footstepGroundSound[2] = sd_footstepGround3; 
footstepGroundSound[3] = sd_footstepGround4; 

//4 RR for ground footsteps
footstepIceSound[0] = sd_footstepIce1; 
footstepIceSound[1] = sd_footstepIce2; 
footstepIceSound[2] = sd_footstepIce3; 
footstepIceSound[3] = sd_footstepIce4; 

//4 RR for farming
farmingSound[0] = sd_farming1; 
farmingSound[1] = sd_farming2; 
farmingSound[2] = sd_farming3; 
farmingSound[3] = sd_farming4; 

//4 RR for pulling out tool
pullOutToolSound[0] = sd_toolPullOut1; 
pullOutToolSound[1] = sd_toolPullOut2; 
pullOutToolSound[2] = sd_toolPullOut3; 
pullOutToolSound[3] = sd_toolPullOut4; 
 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spirtes

//Putting sprite indexes into variables so that we can change the sprites on the go without changing the code that changes the sprites

spriteIdleRight = spr_workerIdleRight1;
spriteIdleLeft = spr_workerIdleLeft1;
idleImageSpeed = .09;

spriteWalkingLeftEmpty = spr_miner1RegLeftWalkingEmpty;
spriteWalkingLeftFull = spr_miner1RegLeftWalkingFull;

spriteWalkingRightEmpty = spr_miner1RegRightWalkingEmpty;
spriteWalkingRightFull = spr_miner1RegRightWalkingFull;

spriteMiningLeft = spr_miner1RegLeftMining;
spriteMiningRight = spr_miner1RegRightMining;
spriteDrawToolMiningLeft = spr_workerDrawToolMiningLeft1;
spriteDrawToolMiningRight = spr_workerDrawToolMiningRight1;

spriteIdleMiningRight = spr_miner1RegRightMining;
spriteIdleMiningLeft = spr_miner1RegLeftMining;

spriteCuttingLeft = spr_workerWoodcutLeft1;
spriteCuttingRight = spr_workerWoodcutRight1;
spriteDrawToolWoodcuttingRight = spr_workerDrawToolWoodcutRight1;
spriteDrawToolWoodcuttingLeft = spr_workerDrawToolWoodcutLeft1;

spriteFarmingRight = spr_workerFarmingRight1;
spriteFarmingLeft = spr_workerFarmingLeft1;
spriteDrawToolFarmingRight = spr_workerDrawToolFarmingRight1;
spriteDrawToolFarmingLeft = spr_workerDrawToolFarmingLeft1;

spriteSittingDownRight = spr_workerSittingDownRightReg1;
spriteSittingDownLeft = spr_workerSittingDownLeftReg1;

spriteRunningRight = spr_workerRunningRightReg1;
spriteRunningLeft = spr_workerRunningLeftReg1; 

spriteSupplyCarryRight = spr_workerSupplyCarryRightReg1;
spriteSupplyCarryLeft = spr_workerSupplyCarryLeftReg1;

spriteSupplyDropRight = spr_workerSupplyDropRightReg1; 
spriteSupplyDropLeft = spr_workerSupplyDropLeftReg1; 

spriteDyingRight = spr_workerDyingRightReg1;
spriteDyingLeft = spr_workerDyingLeftReg1;

spriteBuildingRight = spr_workerBuildingRightReg1;
spriteBuildingLeft = spr_workerBuildingLeftReg1;

spriteDamageFrameRight = spr_workerDamageFrameRightReg1;
spriteDamageFrameLeft = spr_workerDamageFrameLeftReg1;

spritePickUpRight = spr_workerPickupRightReg1;
spritePickUpLeft = spr_workerPickupLeftReg1;





sprite_index = spriteIdleLeft;
image_speed = idleImageSpeed;













</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Setup

//inv[?,0] = name
//inv[?,1] = type
//inv[?,2] = gem socket
//inv[?,3] = gem bonus 1 
//inv[?,4] = gem bonus 2 
//inv[?,5] = gem bonus 3 
//inv[?,6] = amount 
//First three slots are the tool slots pickaxe - hatchet - hoe
//slot 1
inv[0,0] = "Iron Pickaxe";
inv[0,1] = "tool";
inv[0,2] = -1;
inv[0,3] = -1;
inv[0,4] = -1;
inv[0,5] = -1;
//slot 2
inv[1,0] = "Iron Hatchet";
inv[1,1] = "tool";
inv[1,2] = -1;
inv[1,3] = -1;
inv[1,4] = -1;
inv[1,5] = -1;
//slot 3
inv[2,0] = "Iron Hoe";
inv[2,1] = "tool";
inv[2,2] = -1;
inv[2,3] = -1;
inv[2,4] = -1;
inv[2,5] = -1;
//slot 4
inv[3,0] = -1;
inv[3,1] = -1;
inv[3,2] = -1;
inv[3,3] = -1;
inv[3,4] = -1;
inv[3,5] = -1;
inv[3,6] = -1;
//slot 5
inv[4,0] = -1;
inv[4,1] = -1;
inv[4,2] = -1;
inv[4,3] = -1;
inv[4,4] = -1;
inv[4,5] = -1;
inv[4,6] = -1;
//slot 6
inv[5,0] = -1;
inv[5,1] = -1;
inv[5,2] = -1;
inv[5,3] = -1;
inv[5,4] = -1;
inv[5,5] = -1;
inv[5,6] = -1;
//slot 7
inv[6,0] = -1;
inv[6,1] = -1;
inv[6,2] = -1;
inv[6,3] = -1;
inv[6,4] = -1;
inv[6,5] = -1;
inv[6,6] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling 

if (place_meeting(x,y+3,obj_groundParent)){
    falling = 0;
}else{
    falling = 1;
}

//when the worker is falling 
if (falling){
    gravity = 0.2;
}else{
    gravity = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade-in

if(image_alpha &lt; 1){
    image_alpha += .01;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound

//footsteps
if (goingTo || comingFrom || state == 'moveToTarget'){
    if (round(image_index) == 1 &amp;&amp; stepSound == 0 || round(image_index) == 5 &amp;&amp; stepSound == 0){
        randomize();
        if (!audio_is_playing(footstepGrassSound[footstepRRPosition])){
            footStepSound = audio_play_sound_at(footstepGrassSound[footstepRRPosition],x,y,0,1000,200,1,0,1);  
        }
        audio_sound_pitch(footStepSound,random_range(.90,1.3));
        audio_sound_gain(footStepSound, global.sfxVol,0);
        footstepRRPosition ++;
        if (footstepRRPosition &gt; 3){
            footstepRRPosition = irandom(2);
        }       
        stepSound = 1;
    } 
    
    if (round(image_index) != 1 &amp;&amp; round(image_index) != 5){
        stepSound = 0;
    }
}
//Pulling out tool
if (drawTool &amp;&amp; drawToolTimer == 0){
    var sound = audio_play_sound_at(pullOutToolSound[irandom(3)],x,y,0,1000,200,1,0,5);
    audio_sound_gain(sound,global.sfxVol,0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Farming
if (!dying){
    
    if (state == 'farming'){
        moveToTimer ++;
        image_speed = walkingImageSpeed;
        //Workers walks to the resource to mine it
        if (moveToTimer &gt; moveToTime){
            if (target.x &gt; x &amp;&amp; !farmStart &amp;&amp; goingTo){
                sprite_index = spriteWalkingRightEmpty;
                scr_unit_move_avoiding_right();
            }else if(!farmStart &amp;&amp; goingTo){
                sprite_index = spriteWalkingLeftEmpty;
                scr_unit_move_avoiding_left();
            }
        }
        //Starts the worker to mining
        if (farmStart){
            image_speed = farmingImageSpeed;
            if (!drawTool){
                farmingTimer ++;
                //set the sprite
                if (x &gt; target.x){
                    sprite_index = spriteFarmingLeft;
                }else{
                    sprite_index = spriteFarmingRight;
                } 
                //Triggers sound and particles
                if (round(image_index) == 5 &amp;&amp; cutSound == 0){
                    var sound = audio_play_sound_at(farmingSound[workRRPosition],x,y,0,1000,200,1,0,999999);  
                    audio_sound_gain(sound,global.sfxVol,0);
                    part_particles_create(global.partMining,x+workingLenDirX,y+workingLenDirY,global.partWoodChips,10);
                    workRRPosition ++;
                    if (workRRPosition &gt; 3){
                        randomize();
                        workRRPosition = irandom(2);
                    }
                    cutSound = 1; 
                } 
                if (round(image_index) != 5){
                    cutSound = 0;
                }
                //Makes miner take the resousces to the stockpile
                if (farmingTimer &gt;= farmingTime){
                    randomize();
                    goingTo = 0;
                    comingFrom = 1;
                    farmStart = 0;
                    farmingTimer = 0;
                    middleTimeFarming = (choose(30,40,50) + irandom(80));
                    moveToTime = 2 + irandom(20);
                    moveToTimer = 0;
                    middleTimer = 0;
                    target.amountLeft -= 40;
                    //pops up xp gained
                    with(instance_create(x,y,obj_workerDrawTimed)){
                        amount = ("+"+string(25)+"XP");
                        col = c_yellow;
                        myWorker = other.id;
                    }
                    target.resources -= pickupLoad;
                    xpFarming += target.xp;
                    //Put the just mined resources into the inventory
                    for (i = 3;i &lt;= 6; i++){
                        if (inv[i,0] == -1){
                            inv[i,0] = target.resource;
                            inv[i,1] = 'resource';
                            inv[i,6] = pickupLoad;
                            break;
                        }
                    }
                    //levels up if there is enough xp
                    if (xpFarming &gt;= xpNeededFarming){
                        farmingLevel ++;
                        xpNeededFarming += floor(farmingLevel+300 * power(2,(farmingLevel/7)));
                        baseFarmingTime -= (10 + irandom(5));
                    }
                    
                }
            }else{
            //starts the pulling out tool animation
                if (target.x &gt; x){
                    sprite_index = spriteDrawToolFarmingRight;
                }else{
                    sprite_index = spriteDrawToolFarmingLeft;    
                }
                    drawToolTimer ++;
                if (drawToolTimer &gt;= drawToolTimeWoodcutting){
                    drawTool = 0;
                    drawToolTimer = 0;
                    dir = point_direction(x,y,target.x,target.y);
                }
            }
        }
        //Wait for resource to not be exhausted
        with(target){
            if (amountLeft &lt;= 0){
                if (!exPopUp){
                    moveToTimer = 0;
                    exPopUp = 1;
                    with(instance_create(x,y,obj_workerDrawTimed)){
                        col = c_red;
                        amount = "!";
                        xScale = 2;
                        yScale = 2;
                    }
                }
                amountLeft = 0;
                exhausted = 1;
                other.farmStart = 0;
                other.farmingTimer = 0;
                other.pickSoundTimer = 0;
            }
        }
        //Starts the worker back to mining
        if (waitingToFarm &amp;&amp; target.exhausted == 0){
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                farmStart = 1;
                farmingTimer = 0;
                pickSoundTimer = 0;
                comingFrom = 0;
                gointTo = 1;
                waitingToFarm = 0;
                if (target.x &gt; x){
                    sprite_index = spriteMiningRight;
                }else{
                    sprite_index = spriteMiningLeft;
                }
            }
        //set idle animation
        }else if (waitingToFarm){
            if (target.x &gt; x){
                sprite_index = spriteIdleRight;
                image_speed = idleImageSpeed;
            }else{
                sprite_index = spriteIdleLeft;
                image_speed = idleImageSpeed;
               
            }   
        }
        //Sets the miner going towards the stockpile
        if (comingFrom &amp;&amp; x &lt; dropOffTarget.x){
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                sprite_index = spriteSupplyCarryRight;
                scr_unit_move_avoiding_right();   
        }
        }else if (comingFrom){
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                sprite_index = spriteSupplyCarryLeft;
                scr_unit_move_avoiding_left();
            }
        }
    
    }    

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mining
if (!dying){
    
    if (state == 'mining'){
        moveToTimer ++;
        image_speed = walkingImageSpeed;
        //Workers walks to the resource to mine it
        if (moveToTimer &gt; moveToTime){
            if (target.x &gt; x &amp;&amp; !mineStart &amp;&amp; goingTo){
                sprite_index = spriteWalkingRightEmpty;
                scr_unit_move_avoiding_right();  
            }else if(!mineStart &amp;&amp; goingTo){
                sprite_index = spriteWalkingLeftEmpty;
                scr_unit_move_avoiding_left();  
            }
        }
        //Starts the worker to mining
        if (mineStart){
            image_speed = miningImageSpeed;
            if (!drawTool){
                miningTimer ++;
                //set the sprite
                if (x &gt; target.x){
                    sprite_index = spriteMiningLeft;
                }else{
                    sprite_index = spriteMiningRight;
                } 
                //Triggers sound and particles
                if (round(image_index) == 5 &amp;&amp; cutSound == 0){
                    var dir = point_direction(x,y,target.x,target.y);
                    var sound = audio_play_sound_at(pickSound[workRRPosition],x,y,0,1000,200,1,0,999999);  
                    audio_sound_gain(sound,global.sfxVol,0);
                    part_particles_create(global.partMining,x+lengthdir_x(6,dir),y+lengthdir_y(6,dir),global.partStoneChips,10);
                    workRRPosition ++;
                    if (workRRPosition &gt; 3){
                        randomize();
                        workRRPosition = irandom(2);
                    }
                    cutSound = 1; 
                } 
                if (round(image_index) != 5){
                    cutSound = 0;
                }
                //Makes miner take the resources to the stockpile
                if (miningTimer &gt;= miningTime){
                    //Set chance to drop a gem
                    gemBonus = (((target.gemChance) * .01) * miningLevel);
                    randomize();
                    if (irandom(target.gemChance - gemBonus) == 1){
                        instance_create(target.x,target.y-6,obj_ruby);
                        show_debug_message("Ruby");
                    }
                    goingTo = 0;
                    comingFrom = 1;
                    mineStart = 0;
                    miningTimer = 0;
                    middleTimeMining = (2 + irandom(10));
                    moveToTime = 2 + irandom(20);
                    moveToTimer = 0;
                    middleTimer = 0;
                    target.amountLeft -= 40;
                    //pops up xp gained
                    with(instance_create(x,y,obj_workerDrawTimed)){
                        amount = ("+"+string(target.xp)+"XP");
                        col = c_yellow;
                        myWorker = other.id;
                    }
                    target.resources -= pickupLoad;
                    xpMining += target.xp;
                    //Put the just mined resources into the inventory
                    for (i = 3;i &lt;= 6; i++){
                        if (inv[i,0] == -1){
                            inv[i,0] = target.resource;
                            inv[i,1] = 'resource';
                            inv[i,6] = pickupLoad;
                            break;
                        }
                    }
    
                    if (xpMining &gt;= xpNeededMining){
                        miningLevel ++;
                        xpNeededMining += floor(miningLevel+300 * power(2,(miningLevel/7)));
                        baseMiningTime -= (10 + irandom(5));
                    }
                    
                }
            }else{
            //starts the pulling out tool animation
                if (target.x &gt; x){
                    sprite_index = spriteDrawToolMiningRight;
                }else{
                    sprite_index = spriteDrawToolMiningLeft;    
                }
                    drawToolTimer ++;
                if (drawToolTimer &gt;= drawToolTimeWoodcutting){
                    drawTool = 0;
                    drawToolTimer = 0;
                    dir = point_direction(x,y,target.x,target.y);
                }
            }
        }
        //Wait for resource to not be exhausted
        with(target){
            if (amountLeft &lt;= 0){
                if (!exPopUp){
                    moveToTimer = 0;
                    exPopUp = 1;
                    with(instance_create(x,y,obj_workerDrawTimed)){
                        col = c_red;
                        amount = "!";
                        xScale = 2;
                        yScale = 2;
                    }
                }
                amountLeft = 0;
                exhausted = 1;
                other.farmStart = 0;
                other.farmingTimer = 0;
                other.pickSoundTimer = 0;
            }
        }
        //Starts the worker back to mining
        if (waitingToMine &amp;&amp; target.exhausted == 0){
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                mineStart = 1;
                miningTimer = 0;
                pickSoundTimer = 0;
                comingFrom = 0;
                gointTo = 1;
                waitingToMine = 0;
                if (target.x &gt; x){
                    sprite_index = spriteMiningRight;
                }else{
                    sprite_index = spriteMiningLeft;
                }
            }
        //set idle animation
        }else if (waitingToMine){
            if (target.x &gt; x){
                sprite_index = spriteIdleRight;
                image_speed = idleImageSpeed;
            }else{
                sprite_index = spriteIdleLeft;
                image_speed = idleImageSpeed;
               
            }   
        }
        //Sets the miner going towards the stockpile
        if (comingFrom &amp;&amp; x &lt; dropOffTarget.x){
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                sprite_index = spriteSupplyCarryRight;
                scr_unit_move_avoiding_right();     
        }
        }else if (comingFrom){
            moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                sprite_index = spriteSupplyCarryLeft;
                scr_unit_move_avoiding_left();  
            }
        }
    
    }    

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fighting

if (!dying){
  //When the miner is being attacked
    if (beingAttacked){
        miningTimer = 0;
        mineStart = 0;
        if (knockBack){
            knockBackTimer ++;
            if (knockBackTimer &lt; 20){
                if (attacker.x &gt; x){
                    x -= .8;
                }else{
                    x += .8;
                }
            }else{
                knockBack = 0;
                knockBackTimer = 0;
            }
        }    
    }else{
        knockBackTimer = 0;
        knockBack = 0;
    }
        
    if (numberTimer &gt;= 1){
        numberTimer ++;
        if (numberTimer &gt;= 10){
            dmgNumber = instance_create(x,y-10,obj_enemyDrawCon);
            dmgNumber.myEnemy = id;
            dmgNumber.dmg = attacker.dmg;
            numberTimer = 0;
            hp -= attacker.dmg;
            part_particles_create(global.partEnemyBlood,x,y,global.partBloodRed,20);
        }
    }
}else{
    image_speed = 0;
    image_alpha -= .01;
    if (image_alpha &lt;= 0){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Woodcutting
if (state == 'woodcutting'){
    image_speed = walkingImageSpeed;
    moveToTimer ++;
     //makes the worker walk to the tree
     if (moveToTimer &gt; moveToTime){
         if (target.x &gt; x &amp;&amp; !cutStart &amp;&amp; goingTo){
            sprite_index = spriteWalkingRightEmpty;
            scr_unit_move_avoiding_right();
         }else if(!cutStart &amp;&amp; goingTo){
            sprite_index = spriteWalkingLeftEmpty;
            scr_unit_move_avoiding_left();
         }
     }
    //starts the worker to woodcutting
    if (cutStart){
        image_speed = woodcuttingImageSpeed;
        if (!drawTool){
            cuttingTimer ++;
            //set the sprite
            if (x &gt; target.x){
                sprite_index = spriteCuttingLeft;
            }else{
                sprite_index = spriteCuttingRight;
            } 
            //Triggers sound and particles
            if (round(image_index) == 6 &amp;&amp; cutSound == 0){
                dir = point_direction(x,y,target.x,target.y);
                workSound = audio_play_sound_at(woodcutSound[workRRPosition],x,y,0,1000,200,1,0,workRRPosition); 
                randomize();
                audio_sound_gain(workSound,global.sfxVol,0);
                audio_sound_pitch(workSound,random_range(.95,1.2)); 
                part_particles_create(global.partMining,x+lengthdir_x(32,dir),y,global.partWoodChips,10);
                workRRPosition ++;
                if (workRRPosition &gt; 3){
                    randomize();
                    workRRPosition = irandom(2);
                }
                cutSound = 1; 
            } 
            if (round(image_index) != 6){
                cutSound = 0;
            }
            //adds the resouces the worker and decements wood from the tree
            if (cuttingTimer &gt;= cuttingTime &amp;&amp; !target.falling){
                image_speed = walkingImageSpeed;
                goingTo = 0;
                drawTool = 0;
                comingFrom = 1;
                middleTimer = 0;
                cutStart = 0;
                cuttingTimer = 0;
                target.woodLeft -= 40;
                target.fall -= 40;
                //Randomizes the position of the cutting more when then the target tree has fallen
                if (target.fell == 0){
                    middleTimeWoodcutting =  (2 + irandom(10));
                }else{
                    middleTimeWoodcutting =  (2 + irandom(40));    
                }
                moveToTime = 2 + irandom(20);
                moveToTimer = 0;
                //pops up xp gained
                with(instance_create(x,y,obj_workerDrawTimed)){
                    amount = ("+"+string(target.xp)+"XP");
                    col = c_yellow;
                    myWorker = other.id;
                }
                //If the worker is already over the warehouse stop the middletimer 
                if (place_meeting(x,y,obj_warehouse)){
                    middleTimer = middleTimeWoodcutting;
                }
                //pops up xp gained
                target.resources -= pickupLoad;
                xpWoodcutting += target.xp;
                //Put the just mined resources into the inventory
                for (i = 3;i &lt;= 6; i++){
                    if (inv[i,0] == -1){
                        inv[i,0] = target.resource;
                        inv[i,1] = 'resource';
                        inv[i,6] = pickupLoad;
                        break;
                    }
                }
                //Levels the worker up if he has enough XP
                if (xpWoodcutting &gt;= xpNeededWoodcutting){
                    with(instance_create(x,y,obj_workerDrawTimed)){
                        myWorker = other.id;
                        amount = "Level Up!";
                        col = c_yellow;
                    }
                    woodcuttingLevel ++;
                    xpNeededWoodcutting += floor(woodcuttingLevel+300 * power(2,(woodcuttingLevel/7)));
                    baseCuttingTime -= (10 + irandom(5));
                }
                //if warehouse is not built, make idle
                if (!instance_exists(dropOffTarget)){
                    state = 'idle';
                }
                //check to see if the tree is over the warehouse
                if (point_distance(x,y,dropOffTarget.x,dropOffTarget.y) &lt; 10){
                    middleTimer = 50;
                }
            }
        }else{
            //starts the pulling out tool animation
            if (target.x &gt; x){
                sprite_index = spriteDrawToolWoodcuttingRight;
            }else{
                sprite_index = spriteDrawToolWoodcuttingLeft;    
            }
            drawToolTimer ++;
            if (drawToolTimer &gt;= drawToolTimeFarming){
                drawTool = 0;
                drawToolTimer = 0;
                dir = point_direction(x,y,target.x,target.y);
            }
        }
    }
    //Makes the worker take the reources to the stockpile
    if (comingFrom &amp;&amp; x &lt; dropOffTarget.x &amp;&amp; instance_exists(dropOffTarget)){
        moveToTimer ++;
            if (moveToTimer &gt; moveToTime){
                sprite_index = spriteSupplyCarryRight;
                scr_unit_move_avoiding_right();    
        }
    }else if (comingFrom){
        moveToTimer ++;
        if (moveToTimer &gt; moveToTime){
            sprite_index = spriteSupplyCarryLeft;
            scr_unit_move_avoiding_left();
        }
    }

    //stops the worker from cutting when the tree is falling
    if (target.falling){
        cutStart = 0;
        cuttingTimer = 0;
        move = 1;
    }
    //makes the worker move out from away from the falling tree
    if (move){
        cutTimer = 0;
        cutStart = 0;
        moveTimer ++;
        if (x &gt; target.x &amp;&amp; moveTimer &lt; 150 &amp;&amp; target.fallDir == 'right'){
            scr_unit_move_avoiding_right();
        }
        if (x &lt; target.x &amp;&amp; moveTimer &lt; 150 &amp;&amp; target.fallDir == 'left'){
            scr_unit_move_avoiding_left();   
        }
        if (target.fell){
            move = 0;
            moveTimer = 0;
            moveToTimer = 0;
            goingTo = 1;
            comingFrom = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select box



if (global.select &amp;&amp; selected == 0){
    insideSelectBox = point_in_rectangle(x,y,global.selectStartX,global.selectStartY,mouse_x,mouse_y);
    insideSelectBoxAlt = point_in_rectangle(x,y,mouse_x,mouse_y,global.selectStartX,global.selectStartY);
    if (insideSelectBox || insideSelectBoxAlt){
        global.selectedNumber ++;
        global.unitSelected[global.selectedNumber - 1] = id;
        selected = 1;
    }
}

if (global.select &amp;&amp; selected == 1){
    if (!insideSelectBox &amp;&amp; !insideSelectBoxAlt){
        selected = 0;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to target
if (state == 'moveToTarget'){
    moveToTimer ++;
    image_speed = walkingImageSpeed;
}
//move towards target
if (moveToTimer &gt; moveToTime){
    if (state == "moveToTarget" &amp;&amp; moveTargetX &gt;= x &amp;&amp; moveToTimer &gt; moveToTime){
        sprite_index = spriteWalkingRightEmpty;
        x += walkSpeed;
        //Make the worker go up or down a hill
        if ( (place_meeting(x,y,obj_tileSurfaceHillUp) || place_meeting(x,y,obj_tileSurfaceHillUpUnder) ) &amp;&amp; !position_meeting(x+4,y+24,obj_tileSurfaceFlatParent) ){
            y -= walkSpeedHill+.3;
            leveled = 0;
        }else if (place_meeting(x,y,obj_tileSurfaceHillDown) &amp;&amp; !position_meeting(x-4,y+24,obj_tileSurfaceFlatParent)){
            y += walkSpeedHill+.2;
        }
    }else if (state = 'moveToTarget' &amp;&amp; moveTargetX &lt;= x){
        sprite_index = spriteWalkingLeftEmpty;
        x -= walkSpeed;
        //Make the worker go up or down a hill
        if ( (place_meeting(x,y,obj_tileSurfaceHillDown) || place_meeting(x,y,obj_tileSurfaceHillDownUnder) ) &amp;&amp; !position_meeting(x-4,y+24,obj_tileSurfaceFlatParent) ){
            y -= walkSpeedHill+.3;
            leveled = 0;
        }else if (place_meeting(x,y,obj_tileSurfaceHillUp) &amp;&amp; !position_meeting(x-4,y+24,obj_tileSurfaceFlatParent)){
            y += walkSpeedHill+.2;
        }
    }
}else if (state == 'moveToTarget'){
    image_index = 0;
}
//Stop when the target is reached
if (state == 'moveToTarget' &amp;&amp; ceil(point_distance(x,y,moveTargetX,y)) == 0 &amp;&amp; moveToTimer &gt; moveToTime){
    state = 'idle';
    moveToTimer = 0;
    image_speed = idleImageSpeed;
    if (moveXStart == 'less'){
        sprite_index = spriteIdleRight;
    }else{
        sprite_index = spriteIdleLeft;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working general

if (comingFrom &amp;&amp; !instance_exists(dropOffTarget)){
    state = 'idle';
    if (target.x &gt; x){
        sprite_index = spriteIdleRight;
    }else{
        sprite_index = spriteIdleLeft;
    }
}
//Moves the worker in position to work, if he is directly on top of the resource
//1 = left, 2 = right
if (resourcePosition == 1){
    positionTimer ++;
    x -= walkSpeed;            
}else if (resourcePosition == 2){
    positionTimer ++;
    x += walkSpeed;
}
// stop the movement
if (positionTimer &gt;= positionTime &amp;&amp; (resourcePosition == 1 || resourcePosition == 2)){
    positionTimer = 0;
    goingTo = 1;
    resourcePosition = 0;    
    middleTimer = 0;
    if (x &gt; target.x){
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multi-click select

//State select
if (global.workerStateSelect == 1 &amp;&amp; state == global.workerSelectState &amp;&amp; (distance_to_point((view_wview[0]/2),(view_hview[0]/2)) &lt; 2000) &amp;&amp; selected == 0){
    global.selectedNumber ++;
    global.unitSelected[global.selectedNumber - 1] = id;
    selected = 1;
}

//select all
if (global.workerSelectAll &amp;&amp; distance_to_point((view_wview[0]/2),(view_hview[0]/2)) &lt;= 2000 &amp;&amp; selected == 0){
    global.selectedNumber ++;
    global.unitSelected[global.selectedNumber - 1] = id;
    selected = 1;                
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Idle/Sitting

//Make the worker sit down after they have stayed idle for while
if (state == 'idle'){
    
    idleTimer ++;
    if (idleTimer &gt;= 600){
        state = 'sitting';   
        image_index = 0;
        idleTimer = 0;     
    }   

}

//Sitting

if (state == 'sitting'){
    image_speed = .10
    idleTimer = 0;
    //Make the worker face the right way
    switch(sprite_index){
    
        case spr_workerIdleRight1:
            sprite_index = spr_workerSittingDownRightReg1;
        break;
        
        case spr_workerIdleLeft1:
            sprite_index = spr_workerSittingDownLeftReg1;
        break;
    
    } 
    //Make sure the animation stops on the sitting frame    
    if (image_index &gt;= 5){
        image_speed = 0;
        image_index = 5;
    }
}











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warehouse">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give resources

//Starts middletimer/changes dropoff var
if (comingFrom){
    middleTimer ++;
    if (middleTimer == 60){
        supplyDropOff = 1;
        dropX = x;
        dropY = y;
        image_index = 0;
    }
}

// Adds the resources and sets the worker back to working
if (other.object_index = dropOffTarget &amp;&amp; middleTimer &gt;= 60){
    if ((state == 'mining' || state == 'woodcutting' || state == 'farming') &amp;&amp; comingFrom){
        
        if (!supplyDropOff){
            //loop through the inv slots and add any resources found to the warehouse
            for (i = 3;i&lt;=6;i++){
                if (inv[i,0] != -1 &amp;&amp; (inv[i,1] == 'resource' || inv[i,1] == 'gem')){
                    var yy = 0;
                    (instance_create(x,y+yy,obj_workerDrawTimed)).amount = ("+" + string(inv[i,6]) + " " + string(inv[i,0])); 
                    yy += 32;
                    switch(inv[i,0]){
                        case 'stone': global.stoneP1 += inv[i,6];   
                        break;
                        case 'wood': global.woodP1 += inv[i,6];
                        break;
                        case 'food': global.foodP1 += inv[i,6];
                        break;
                    }
                    //clear the slot
                    inv[i,0] = -1;
                    inv[i,1] = -1;
                    inv[i,2] = -1;
                    inv[i,3] = -1;
                    inv[i,4] = -1;
                    inv[i,5] = -1;
                    inv[i,6] = -1;
                }else{
                    break;
                }
            }
            //set the worker going back
            comingFrom = 0;
            goingTo = 1;
            middleTimer = 0;
        }else{
            //Chnage to the proper sprite
            x = dropX;
            y = dropY;
            image_speed = .10;
            switch(sprite_index){
            
                case spr_workerSupplyCarryRightReg1:
                    sprite_index = spriteSupplyDropRight;   
                    //image_index = 0;
                break;
                
                case spr_workerSupplyCarryLeftReg1:
                    sprite_index = spriteSupplyDropLeft;
                    //image_index = 0;
                break; 
            
            }
            if (image_index &gt;= 6){
                supplyDropOff = 0;
            }
            
        }
        
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_farmingPatch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///farming
//Starts the worker farming

if (other.id == target &amp;&amp; goingTo){
    middleTimer ++;
}

if (state == 'farming' &amp;&amp; other.id == target &amp;&amp; goingTo &amp;&amp; middleTimer &gt; middleTimeFarming){
    drawTool = 1;
    farmStart = 1; 
    goingTo = 0;
    comingFrom = 0; 
    middleTimer = 0;
    moveToTimer = 0;
    randomize();
    farmTimeAdd = irandom(round(baseFarmingTime/3));
    farmingTime = (baseFarmingTime + cutTimeAdd);
    workingLenDirX = lengthdir_x(40,point_direction(x,y,target.x,target.y));
    workingLenDirY = lengthdir_y(26,point_direction(x,y,target.x,target.y));
    image_index = 0;
}else if (other.exhausted &amp;&amp; state == 'farming'){
    waitingToFarm = 1;
    goingTo = 0;
    comingFrom = 0;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_treeParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Woodcut
//Starts the worker woodcutting

if (other.id == target &amp;&amp; goingTo){
    middleTimer ++;
}

if (state == 'woodcutting' &amp;&amp; other.id == target &amp;&amp; goingTo &amp;&amp; middleTimer &gt;= (6+middleTimeWoodcutting) &amp;&amp; woodcuttingLevel &gt;= target.levelReq){
    drawTool = 1;
    cutStart = 1;
    randomize();
    cutTimeAdd = irandom(round(baseCuttingTime/3));
    cuttingTime = (baseCuttingTime + cutTimeAdd);
    moveToTimer = 0;
    image_index = 0; 
    goingTo = 0;
    comingFrom = 0; 
    middleTimer = 0;
    workingLenDirX = lengthdir_x(40,point_direction(x,y,target.x,target.y));
    workingLenDirY = lengthdir_y(26,point_direction(x,y,target.x,target.y));
}else if (woodcuttingLevel &lt; target.levelReq &amp;&amp; other.id == target.id &amp;&amp; state == 'woodcutting'){
    goingTo = 0;
    state = 'idle';
    var msg = instance_create(x,y,obj_workerDrawTimed);
    msg.col = c_red;
    msg.amount = "Can't do that."
    image_speed = idleImageSpeed;
    if (target.x &gt; x){
        sprite_index = spriteIdleRight;
    }else{
        sprite_index = spriteIdleLeft;
    }
}

if (other.id == target &amp;&amp; !drawTool &amp;&amp; cutSound){
    other.animationTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_resourceParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mine
//Starts the worker mining

if (other.id == target &amp;&amp; goingTo){
    middleTimer ++;
}

if (state == 'mining' &amp;&amp; other.id == target &amp;&amp; goingTo &amp;&amp; other.exhausted = 0 &amp;&amp; miningLevel &gt;= other.levelReq &amp;&amp; middleTimer &gt; middleTimeMining){
    randomize();
    mineStart = 1;
    drawTool = 1; 
    goingTo = 0;
    image_index = 0;
    moveToTimer = 0;
    comingFrom = 0;
    mineTimeAdd = irandom(round(baseMiningTime/3));
    miningTime = (baseMiningTime + mineTimeAdd);
    middleTimer = 0;
    comingFrom = 0; 
}else if (other.exhausted &amp;&amp; state == 'mining'){
    waitingToMine = 1;
    goingTo = 0;
    comingFrom = 0;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tileSurfaceFlatParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Put the worker at the right y pos, when they are on flat ground

if (!place_meeting(x,y,obj_tileSurfaceHillParent)){
    y = (other.y-24);
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///being attacked
beingAttacked = 1;
knockBack = 1;
attacker = other.id;

//minerTimer = 1;
numberTimer = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dev mode

//show debug info
if (showDebug){
    showDebug = 0;
}else{
    showDebug = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select

event_inherited();

if (!global.building &amp;&amp; !global.dev_mode_dupe &amp;&amp; !global.shiftSelect &amp;&amp; global.multiClickSelect &lt; 2){
    //clear unit array
    scr_unit_array_clear();
    global.unitSelected[0] = id;
    selected = 1;
}
if (global.shiftSelect){
    scr_unit_array_add(id);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,19</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
