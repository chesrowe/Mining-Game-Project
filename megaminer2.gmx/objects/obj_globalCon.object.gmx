<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General 

//Local variables
refresh = 0;
refresh_ = 0;

minerTimerP1 = 0;
minerTimerP2 = 0;

timer = 0;
created = 0;
myStruc = 0;
structurePlaced = 0;
refresh__ = 0;
alpha = 1;
countUp = 0;
countDown = 1;
scrollSpeed = 0;
scrolling = 0;
maxScroll = 0;
scrollIncrements = 0;
mouseOverPopUpMenu = 0;
moveTimer = 0;
moveTimerStart = 0;
instance_create(x,y,obj_gameFadeIn);




//Workers/guardians
unitMoveX = 0;


//Select box
global.selectBoxStart = 0;
global.selectTimer = 0;
global.select = 0;
global.selectStartX = 0;
global.selectStartY = 0;
global.selectedNumber = 0;
//init array to hold selected units
for (i = 0; i &lt; 200; i++){
    global.unitSelected[i] = noone;
}
insideSelectBox = 0;


//General
global.state = 'neutral';
global.weatherState = 'clear';
global.battleLayer = noone;
global.dev_mode_delete = 0;
global.dev_mode = 0;
global.dev_mode_dupe = 0;
global.dupeObject = noone;
global.selected = noone;
global.shiftSelect = 0;
global.multiClickSelect = 0;
global.clickTimer = 0;
global.workerSelectAll = 0;
global.workerSelectState = 'idle';
global.workerStateSelect = 0;
global.towncenterBuilt = 0;
global.stockpileBuilt = 0;
global.windTimer = 0;
global.windTime = irandom_range(200,600);
global.windBlowTime = irandom_range(100,200);
global.windBlowing = 0;
instance_create(x,y,obj_selectBoxDraw);

//layers
global.currentLayer = 0;
global.layersDiscovered = 0;

//Controls
global.gamepad = 0;
global.localCoop = 0;

//Resources
global.gold = 0;
global.stone = 0;
global.crystal = 0;
global.brimstone = 0;
global.mushroom = 0;
global.woodCommon = 1000;
global.food = 0;

//Gamepad Specific
global.controllerCount = 0;

//Farming/Population
global.pop = 0;

global.maxPop = 5000;

//Fonts
global.fontDmg = font_add_sprite(spr_ft_small,ord(' '),1,1);
draw_set_font(global.fontDmg);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI

//New ui
workerButtonMenu = 0;
buildButton = instance_create(x,35,obj_uiWorkerButtonBuild);
farmButton = instance_create(x,35,obj_uiWorkerButtonFarm);
stockpileButton = instance_create(x,35,obj_uiWorkerButtonStockpile);
global.workerBuild = 1;
global.workerBuildMenu = 0;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound


//Sound Variables
global.currentSong = irandom(1);
global.mute = 0;
pickSoundTimer = 0;
global.songPlaying[0] = 0;
//audio_master_gain(0);
global.sfxVol = .6;
global.musicVol = 0;
global.ambienceVol = .4;
global.ambience[0] = audio_play_sound(sd_surfaceAmbience,9,1);
audio_sound_gain(global.ambience[0],global.ambienceVol,0);
//audio_channel_num(20);
//set sfx volume
if (!audio_group_is_loaded(sfx)){
    audio_group_load(sfx);
}
//audio_group_set_gain(sfx,global.sfxVol,30);

//set listener orientation 
audio_listener_orientation(0,1,0,0,0,1);



//Putting sounds into arrays
global.specialMusic[0] = sd_mainTheme; //Main theme for game

global.surfaceMusic[0] = sd_surfaceDayNeutral1; //day neutral 1
global.surfaceMusic[1] = sd_surfaceDayNeutral2; //day neutral 2
global.surfaceMusic[2] = 0; //day battle 1
global.surfaceMusic[3] = 0; // day battle 2
global.surfaceMusic[4] = sd_surfaceNightNeutral1; // night neutral 1
global.surfaceMusic[5] = 0; //Night neutral 2
global.surfaceMusic[6] = 0; //Night battle 1
global.surfaceMusic[7] = 0; //Night battle 2

global.caveMusic[0] = sd_caveNeutral1; // Cave neutral 1
global.caveMusic[1] = 0; // Cave neutral 2
global.caveMusic[2] = 0; //Cave battle 1
global.caveMusic[3] = 0; // Cave battle 3

global.mushroomMusic[0] = 0; // neutal 1
global.mushroomMusic[1] = 0; // neutral 2
global.mushroomMusic[2] = 0; // battle 1
global.mushroomMusic[3] = 0; // battle 2

global.hauntedMusic[0] = 0;
global.hauntedMusic[1] = 0;
global.hauntedMusic[2] = 0;
global.hauntedMusic[3] = 0;

global.fireMusic[0] = 0;
global.fireMusic[1] = 0;
global.fireMusic[2] = 0;
global.fireMusic[3] = 0;

global.frozenMusic[0] = 0;
global.frozenMusic[1] = 0;
global.frozenMusic[2] = 0;
global.frozenMusic[3] = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles

//create the particle system for blood
spr_part_blood_init();

//Create particle system for miners
global.partMining = part_system_create();
global.partStoneChips = part_type_create();
global.partWoodChips = part_type_create();

//stone
part_type_gravity(global.partStoneChips,.3,270);
part_type_sprite(global.partStoneChips,spr_partStoneChips,0,0,1);
part_type_speed(global.partStoneChips,.5,2,.1,1);
part_type_direction(global.partStoneChips,0,360,0,1);
part_type_life(global.partStoneChips,1,10);

//Wood
part_type_gravity(global.partWoodChips,.3,270);
part_type_sprite(global.partWoodChips,spr_partWoodChips,0,0,1);
part_type_speed(global.partWoodChips,.5,2,.1,1);
part_type_direction(global.partWoodChips,0,360,0,1);
part_type_life(global.partWoodChips,1,10);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// World gen

//vars

//global.worldGenSurface = surface_create(room_width,room_height);
global.tileCount = 0;
surfaceHeight = 696;
xPos = 0;
flatStart = 0;
flatStarted = 0;
firstFlat = -4;
land = -4;
gridPos = 0;
tileIndex = 0;
worldWidth = get_integer("World width in tiles",500); //In tiles (32x32)
global.surfaceHeightGrid = ds_grid_create(worldWidth*2,1000);
hillChance = irandom(1);
hillDistance = irandom_range(20,150);
hillLength = 0;
hillHeightLimit = get_integer("The soft-max y value that the hills can reach(the lower, the higher the hills)",600);

//Put tiles into arrays
surfaceFlatTile[0] = obj_tileSurfaceFlat1;
surfaceFlatTile[1] = obj_tileSurfaceFlat2;
surfaceFlatTile[2] = obj_tileSurfaceFlat3;
surfaceFlatTile[3] = obj_tileSurfaceFlat4;

//Randomize seed 
randomize();

//Generate surface land 
for (i = 0; i &lt;= worldWidth; i++;){
    //Chance to start creating a hill
    if (irandom(hillChance) == 1){
        flatStart = 0;
        flatStarted = 0;
        //Randomize hilliness
        hillLength ++;
        if (hillLength &gt;= hillDistance){
            hillChance = irandom(30);
            hillDistance = irandom_range(20,150);
            hillLength = 0;
        }
        if (surfaceHeight &lt;= (696-64)){
            var hillHeight = choose(32,64,-32,-64);
        }else if (surfaceHeight &lt; (hillHeightLimit)){
            var hillHeight = choose(-32,-64,-32,-64);
        }else{
            var hillHeight = choose(32,64);
        }
        
        surfaceHeight -= hillHeight;    
        //Add the sloped tiles based on hill height
        switch(hillHeight){
            //Add one slope if the height is 32
            case 32:
                ds_grid_add(global.surfaceHeightGrid,gridPos,0,surfaceHeight);
                instance_create(xPos,surfaceHeight,obj_tileSurfaceHillUp);
                //Create one flat tile after slope
                ds_grid_add(global.surfaceHeightGrid,gridPos+1,0,surfaceHeight);
                instance_create(xPos+32,surfaceHeight,surfaceFlatTile[tileIndex]);
                tileIndex ++;
                if (tileIndex &gt; 3){
                    tileIndex = choose(0,1,2);
                }
                xPos += 64;
                gridPos += 2;
                global.tileCount += 3;
            break;
            
            //Add 2 if the height is 64
            case 64:
                ds_grid_add(global.surfaceHeightGrid,gridPos,0,surfaceHeight+32);
                instance_create(xPos,surfaceHeight+32,obj_tileSurfaceHillUp);
                ds_grid_add(global.surfaceHeightGrid,gridPos+1,0,surfaceHeight);
                instance_create(xPos+32,surfaceHeight,obj_tileSurfaceHillUp);
                //Create one flat tile after slope
                ds_grid_add(global.surfaceHeightGrid,gridPos+2,0,surfaceHeight);
                instance_create(xPos+64,surfaceHeight,surfaceFlatTile[tileIndex]);
                tileIndex ++;
                if (tileIndex &gt; 3){
                    tileIndex = choose(0,1,2);
                }
                xPos+= 96;
                gridPos += 3;
                global.tileCount += 5;
            break;
            
            //Add one slope if the height is -32
            case -32:
                ds_grid_add(global.surfaceHeightGrid,gridPos,0,surfaceHeight-32);
                instance_create(xPos,surfaceHeight-32,obj_tileSurfaceHillDown);
                //Create one flat tile after slope
                ds_grid_add(global.surfaceHeightGrid,gridPos+1,0,surfaceHeight);
                instance_create(xPos+32,surfaceHeight,surfaceFlatTile[tileIndex]);
                tileIndex ++;
                if (tileIndex &gt; 3){
                    tileIndex = choose(0,1,2);
                }
                xPos += 64;
                gridPos += 2;
                global.tileCount += 3;
            break;
            
            //Add 2 if the height is -64
            case -64:
                ds_grid_add(global.surfaceHeightGrid,gridPos,0,surfaceHeight-64);
                instance_create(xPos,surfaceHeight-64,obj_tileSurfaceHillDown);
                ds_grid_add(global.surfaceHeightGrid,gridPos+1,0,surfaceHeight-32);
                instance_create(xPos+32,surfaceHeight-32,obj_tileSurfaceHillDown);
                //Create one flat tile after slope
                ds_grid_add(global.surfaceHeightGrid,gridPos+2,0,surfaceHeight);
                instance_create(xPos+64,surfaceHeight,surfaceFlatTile[tileIndex]);
                tileIndex ++;
                if (tileIndex &gt; 3){
                    tileIndex = choose(0,1,2);
                }
                xPos+= 96;
                gridPos += 3;
                global.tileCount += 5;
            break;
        }
    }else{
        //Keep creating land
        hillLength ++;
        if (hillLength &gt;= hillDistance){
            hillChance = irandom(30);
            hillDistance = irandom_range(20,150);
            hillLength = 0;
        }
        
        //If the start of the flat surface hasn't been setup , do so
        if (!flatStarted){
            firstFlat = instance_create(xPos,surfaceHeight,surfaceFlatTile[tileIndex]);;
            firstFlat.flatStarter = 1;
            firstFlat.flatNumber ++;
            flatStarted = 1;
        }else{
            //Else add another number to the first flat tile
            firstFlat.flatNumber ++; 
            instance_create(xPos,surfaceHeight,surfaceFlatTile[tileIndex]);   
        }
        ds_grid_add(global.surfaceHeightGrid,gridPos,0,surfaceHeight);
        global.tileCount += 1;
        xPos += 32;
        gridPos += 1;
        tileIndex ++;
        if (tileIndex &gt; 3){
            tileIndex = choose(0,1,2);
        }
        
    }   

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Merge flat tiles into one instance
with (obj_tileSurfaceFlatParent){
    var i = 0;
    //Fill the flat array with the sprites to be drawn
    repeat(flatNumber){
        flatTiles[i] = choose(spr_surface1,spr_surface2,spr_surface3,spr_surface4);
        //make sure two of the same type tiles aren't directly next to each other
        if (i &gt; 0){
            while(flatTiles[i] == flatTiles[i-1]){
                flatTiles[i] = choose(spr_surface1,spr_surface2,spr_surface3,spr_surface4);        
            }
        }
        i++;
    }
    if (flatStarter &amp;&amp; flatNumber &gt; 0){
        var tilePos = 0;
        //Destroy the extra flat tiles
        repeat(flatNumber){
            with(instance_position(x+((tilePos*32)+16),y+16,obj_tileSurfaceFlatParent)){
                if (flatNumber == 0){
                    instance_destroy();
                }
            }  
            
            tilePos ++;  
        }        
    }
    if (flatNumber &gt; 0){
        image_xscale = (image_xscale*flatNumber);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generate Foliage/resources
foliageSpawnList = ds_list_create();
//add foliage/resources to ds list
repeat(15){
    ds_list_add(foliageSpawnList,obj_tree1);
}
repeat(10){
    ds_list_add(foliageSpawnList,obj_treeEvergreen);
}
repeat(2){
    ds_list_add(foliageSpawnList,obj_stone);
}
repeat(3){
    ds_list_add(foliageSpawnList,obj_oakTree);
}
repeat(1){
    ds_list_add(foliageSpawnList,obj_gold);
}
repeat(5){
    ds_list_add(foliageSpawnList,obj_treeBirch);
}
xPos = 0;
gridPos = 0;
var spawnChance = 2;
//Generate foliage/resources
for (i = 0; i &lt;= worldWidth; i++;){
    xPos = (gridPos * 32);
    //Chance to spawn foliage/resource
    if (irandom(spawnChance) == 1){
        
        ds_list_shuffle(foliageSpawnList);
        var foliage = ds_list_find_value(foliageSpawnList,0);
        var folY = ds_grid_get(global.surfaceHeightGrid,gridPos,0);
        //Place the foliage based on what type it is 
        switch(foliage){
            //spawn common tree
            case obj_tree1: 
                instance_create(xPos,folY-16,foliage);
                gridPos += 3;
            break;
            //spawn oak tree
            case obj_oakTree:
                instance_create(xPos+96,folY-10,foliage);
                gridPos += 6;
            break;
            //Spawn stone 
            case obj_stone:
                instance_create(xPos,folY-10,foliage);
                gridPos += 3;
            break;
            //Spawn gold 
            case obj_gold:
                instance_create(xPos,folY-10,foliage);
                gridPos += 3;
            break;
            //Spawn birch tree 
            case obj_treeBirch:
                instance_create(xPos,folY-16,foliage);
                gridPos += 3;
            break;
            //Spawn evergreen
            case obj_treeEvergreen: 
                instance_create(xPos,folY-6,foliage);
                gridPos += 3;
            break;
        }
        
    }else{
        gridPos += 1;
    }

}
//After world is generated, move camera to center of the room
view_xview[0] = (worldWidth/2)*32;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init towncenter building

global.building = 1;
instance_create(mouse_x,mouse_y,obj_townCenter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multi-click select

if (global.clickTimer &gt;= 1){
    global.clickTimer ++;
    if (global.clickTimer &gt;= 25){
        global.clickTimer = 0;
        global.multiClickSelect = 0;
        global.workerSelectAll = 0;
        global.workerStateSelect = 0;
    }
}
depth = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound
//Set listener position
audio_listener_position(view_xview[0]+640,view_yview[0]+360,0); 


//Checks to see which layer the player is on and if there is a battle or not, then plays the appropriate music

//Surface layer
if (global.currentLayer == 0){
    
    if (global.state = 'battle' &amp;&amp; !global.mute){
    //battle music    
    }else{
        //play neutral music
        if (!audio_is_playing(global.surfaceMusic[global.currentSong]) &amp;&amp; !global.mute){
            //changes the song when one is done playing
            if (global.currentSong = 0){
                global.currentSong = 1;
            }else{
                global.currentSong = 0;
            }
            global.songPlaying[0] = audio_play_sound(global.surfaceMusic[global.currentSong],100,0);
            audio_sound_gain(global.songPlaying[0],global.musicVol,10);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard/Mouse

//Spacebar makes the game go to full screen
if (keyboard_check_released(vk_space)){ 
    if (!window_get_fullscreen()){
        window_set_fullscreen(true);    
    }else{
        window_set_fullscreen(false);
    }
} 

//Camera movement with mouse
if (mouse_x &lt; view_xview[0] + 40){
    scrolling = 1;
    scrollIncrements = -.5;
    maxScroll = -10;
}

if (mouse_x &gt; view_xview[0] + 1200){
    scrolling = 1;
    scrollIncrements = .5;
    maxScroll = 10;
}
//stops scrolling when no scroll action is beining performed
if (mouse_x &lt; view_xview[0] + 1200 &amp;&amp; mouse_x &gt; view_xview[0] + 40 &amp;&amp; !keyboard_check(ord('A')) &amp;&amp; !keyboard_check(ord('D'))){
    scrolling = 0;
}
//Camera movement with A and D keys
if (keyboard_check(ord('A'))){
    scrolling = 1;
    scrollIncrements = -.5;
    maxScroll = -10;
}
if (keyboard_check(ord('D'))){
    scrolling = 1;
    scrollIncrements = .5;
    maxScroll = 10;
}

if (keyboard_check(ord('W'))){
    view_yview[0] -= 4;
}

if (keyboard_check(ord('S'))){
    view_yview[0] += 4;
}

//Starts and stops the scrolling
if (scrolling){
    if (scrollSpeed != maxScroll &amp;&amp; scrollSpeed &lt; 11){
        scrollSpeed += scrollIncrements;
    }
    if (view_xview[0] &gt; 0 || view_xview[0] &lt; 1280){ 
        view_xview[0] += scrollSpeed;
        view_xview[0] = round(view_xview[0]);
    }
    if (view_xview[0] &lt; 0){
        scrollSpeed = 0;
        view_xview[0] = 0;
    }
}else{
    if (scrollSpeed != 0 &amp;&amp; scrollSpeed &lt;= 10){
        scrollSpeed -= scrollIncrements;
    }
    if (view_xview[0] &gt; 0){
        view_xview[0] += scrollSpeed;
        view_xview[0] = round(view_xview[0]);
    }
} 




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///misc
//checks to see if the mouse is over a menu
if (instance_exists(obj_buildingPopUpParent) &amp;&amp; instance_position(mouse_x,mouse_y,obj_buildingPopUpParent)){
    mouseOverPopUpMenu = 1;
}else{
    mouseOverPopUpMenu = 0;
}

// Sets the current population

global.pop = instance_number(obj_workerParent);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select box

if (global.select){
    global.selectTimer ++;
    if (global.selectTimer &gt;= 2){
        global.select = 0;
        global.selectTimer = 0;
        global.workerSelectAll = 0;
        global.workerStateSelect = 0;
         if (global.selectedNumber != 0 &amp;&amp; scr_unit_array_check_for_worker() == 1){
            buildButton.visible = 1;
            farmButton.visible = 0;
            stockpileButton.visible = 0;
            workerButtonMenu = 0;
        }else{
            buildButton.visible = 0;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ui 

//Snap worker buttons in place
buildButton.x = view_xview[0]+550;
stockpileButton.x = view_xview[0]+300;
farmButton.x = view_xview[0]+550;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weather
//Set the wind to blow at random times
if (!global.windBlowing){
    global.windTimer ++;
}

if (global.windTimer &gt;= global.windTime &amp;&amp; !global.windBlowing){
    global.windBlowing = 1; 
    global.windTimer = 0;   
}

if (global.windBlowing){
    global.windTimer ++;
    if (global.windTimer &gt;= global.windBlowTime){
        global.windTimer = 0;
        global.windBlowing = 0;
        global.windTime = irandom_range(200,600);
        global.windBlowTime = irandom_range(200,600);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move units

if (!position_meeting(mouse_x,mouse_y,obj_resourceParent) &amp;&amp; !position_meeting(mouse_x,mouse_y,obj_treeParent) &amp;&amp; !position_meeting(mouse_x,mouse_y,obj_farmingPatch) &amp;&amp; !position_meeting(mouse_x,mouse_y,obj_workerParent)){ 
    //Only move the units if there is not an unfinished building at the position
    //otherwise the worker will be set to building
    if (position_meeting(mouse_x,mouse_y,obj_buildingParent)){
        var building = instance_position(mouse_x,mouse_y,obj_buildingParent);
        if (building.built){
            scr_unit_array_set_move_target(15);
        }
    }else{
        scr_unit_array_set_move_target(15);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deselect

if (global.workerBuild){
    with (global.selected){
        global.woodCommon += costWoodCommon;
        global.stoneP1 += costStone;
        instance_destroy();
        global.workerBuild = 0;
    }
}
//scr_unit_array_clear();
global.selected = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place building

//Build selected buildings
if (global.workerBuild &amp;&amp; global.selected != noone &amp;&amp; !global.dev_mode_dupe){
    if ((global.selected).y == ((global.selected).groundY - (global.selected).originOffY)){
        with(global.selected){
            if (!place_meeting(x,y,obj_buildingParent) &amp;&amp; scr_building_can_be_placed()){
                placed = 1;
                //Set the selected units to building the structure
                with (obj_workerParent){
                    scr_unit_array_set_resource_target('building',global.selected);
                }
                
                //Assign the selected workers to start building the structure
                if ((global.selected).object_index != obj_townCenter &amp;&amp; (global.selected).object_index != obj_warehouse){    
                    global.workerBuild = 0;
                    workerButtonMenu = 0;
                    global.workerBuildMenu = 0;
                    global.selected = noone;
                    global.building = 0;
                    scr_unit_array_clear();
                    //If the structure is a towncenter or warehouse, make the structure automatically build
                    }else if ((global.selected).object_index == obj_townCenter){
                    
                        global.towncenterBuilt = 1; 
                        var pile = instance_create(mouse_x,mouse_y,obj_warehouse);   
                        global.workerBuild = 1;
                        global.selected = pile;
                        global.building = 0;
                    }else if ((global.selected).object_index == obj_warehouse){
                        global.stockpileBuilt = 1;  
                        global.selected  = -4;
                        global.workerBuild = 0; 
                        global.building = 0;     
                }
              
            }else{
                scr_create_floating_message(mouse_x,mouse_y,.1,2,30,"Can't build that there.");
            }
        }
    }   
}

//deselects the selected object if you click in an empty area
if (!global.workerBuild &amp;&amp; global.selected != noone){
    if (!instance_position(mouse_x,mouse_y,obj_workerParent) &amp;&amp; !instance_position(mouse_x,mouse_y,obj_buildingParent) &amp;&amp; !mouseOverPopUpMenu){
        global.selected = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dev Mode

if (global.dev_mode_dupe &amp;&amp; !global.building){
    if (global.dupeObject != noone){
        instance_create(mouse_x,mouse_y,global.dupeObject);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select box

if (global.selectBoxStart){
   //Clear selected units
    //scr_unit_array_clear();
    global.selectBoxStart = 0;
    global.select = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deselect


moveTimerStart = 0;
moveTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select box

//if there is no selectable object underneath the mouse
if (!global.workerBuild &amp;&amp; !position_meeting(mouse_x,mouse_y,obj_workerParent) &amp;&amp; !position_meeting(mouse_x,mouse_y,obj_uiWorkerButtonParent) &amp;&amp; !position_meeting(mouse_x,mouse_y,obj_treeParent)&amp;&amp; !position_meeting(mouse_x,mouse_y,obj_resourceParent) &amp;&amp; !global.selectBoxStart &amp;&amp; !global.shiftSelect){
    global.selectBoxStart = 1;
    global.selectStartX = mouse_x;
    global.selectStartY = mouse_y;
    scr_unit_array_clear();

    global.workerStateSelect = 0;
    //Deselect all workers, unless you are clicking a button
    if (!position_meeting(mouse_x,mouse_y,obj_uiWorkerButtonParent)){
        with(obj_workerParent){
            selected = 0;
            other.buildButton.visible = 0;
            global.workerBuildMenu = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multi-click select
var cleared = 0;
//double click and triple click selects workers
if (position_meeting(mouse_x,mouse_y,obj_workerParent)){
    if (!global.workerBuild &amp;&amp; !global.dev_mode_dupe &amp;&amp; !global.shiftSelect){
        global.multiClickSelect ++;
        global.clickTimer = 1;
        if (global.multiClickSelect == 2 &amp;&amp; !cleared){
            scr_unit_array_clear();
            cleared = 1;
            global.workerSelectState = (instance_position(mouse_x,mouse_y,obj_workerParent)).state;
            global.workerStateSelect = 1;
        }
        if (global.multiClickSelect == 3){
            global.workerStateSelect = 0;
            global.workerSelectAll = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

font_delete(global.fontDmg);
part_system_destroy(global.partMining);
surface_free(global.worldGenSurface);
ds_grid_destroy(global.surfaceHeightGrid);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse/keyboard Ui
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background

draw_background_tiled_hor(background7,view_xview[0]/1.03,(view_yview[0]+120)/1.03);
draw_background_tiled_hor(bg_mountains,view_xview[0]/1.1,(view_yview[0]+90)/1.2);
draw_background_tiled_hor(bg_bushClose,view_xview[0]/6,570);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dev mode 

//Draw dev mode on the side of the screen

if (global.dev_mode){
    draw_set_colour(c_white);
    draw_set_font(global.fontDmg);
    draw_text(view_xview[0]+1130,view_yview[0]+695,"Dev mode on");
    draw_text(view_xview[0]+1130,view_yview[0]+30,"Fps: " + string(floor(fps_real)));
    draw_text(view_xview[0]+1130,view_yview[0]+50,"Workers: " + string(instance_number(obj_workerParent)));
    draw_text(view_xview[0]+1130,view_yview[0]+70,"Tile Count: " + string(global.tileCount));
    draw_text(view_xview[0]+1130,view_yview[0]+90,"Total instances: " + string(instance_count));
    
    if (global.dev_mode_dupe){
        draw_text(view_xview[0]+1060,view_yview[0]+670,"Object to create: "+string(global.dupeObject));
        if (global.dupeObject != noone){
            draw_text(view_xview[0]+1010,view_yview[0]+650,"Selected Object count: "+string(instance_number(global.dupeObject)));    
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General

draw_set_color(c_white);
draw_set_font(global.fontDmg);
draw_text(view_xview[0]+5,view_yview[0]+700,"In VERY early development");
draw_text(view_xview[0]+150,view_yview[0]+100,"Stone: " + string(global.stone));
draw_text(view_xview[0]+240,view_yview[0]+100,"Wood: " + string(global.woodCommon));
draw_text(view_xview[0]+310,view_yview[0]+100,"Gold: " + string(global.gold));
draw_text(view_xview[0]+410,view_yview[0]+100,"Food: " + string(global.food));
draw_text(view_xview[0]+150,view_yview[0]+(string_height("W")+100),"Population: " + string(global.pop)+ "/" + string(global.maxPop));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

if (global.dev_mode){
    draw_set_font(ft_gameFont);
    draw_text(mouse_x-15,mouse_y-200,"WorkerSelectAll_" + string(global.workerSelectAll));
    draw_text(mouse_x-15,mouse_y-190,"workerSelectState" + string(global.workerSelectState));
    draw_text(mouse_x-15,mouse_y-180,"ClickTimer_" + string(global.clickTimer));
    draw_text(mouse_x-15,mouse_y-170,"MultiClickSelect_" + string(global.multiClickSelect));
    draw_text(mouse_x-15,mouse_y-160,"shiftSelect_" + string(global.shiftSelect));
    draw_text(mouse_x-15,mouse_y-150,"SelectBoxStart_" + string(global.selectBoxStart));   
    draw_text(mouse_x-15,mouse_y-140,"SelectStartX_" + string(global.selectStartX));   
    draw_text(mouse_x-15,mouse_y-130,"SelectStartY_" + string(global.selectStartY)); 
    draw_text(mouse_x-15,mouse_y-120,"SelectedNumber_" + string(global.selectedNumber)); 
    draw_text(mouse_x-15,mouse_y-110,"Select_" + string(global.select));
    draw_text(mouse_x-15,mouse_y-100,"global.workerBuilding_" + string(global.workerBuild));
    draw_text(mouse_x-15,mouse_y-90,"global.selected_" + string(global.selected));
    //draw_text(mouse_x-15,mouse_y-100,"BoxColliding?_" + string(collision_rectangle(global.selectStartX,global.selectStartY,mouse_x,mouse_y,obj_workerParent,0,0)));
    draw_text(mouse_x-100,mouse_y-240,"UnitSelected1_" + string(global.unitSelected[0]));
    draw_text(mouse_x-100,mouse_y-230,"UnitSelected2_" + string(global.unitSelected[1]));
    draw_text(mouse_x-100,mouse_y-220,"UnitSelected3_" + string(global.unitSelected[2]));
    draw_text(mouse_x-100,mouse_y-210,"UnitSelected4_" + string(global.unitSelected[3]));
    draw_text(mouse_x-100,mouse_y-200,"UnitSelected5_" + string(global.unitSelected[4]));
    draw_text(mouse_x-100,mouse_y-190,"UnitSelected6_" + string(global.unitSelected[5]));
    draw_text(mouse_x-100,mouse_y-180,"UnitSelected7_" + string(global.unitSelected[6]));
    draw_text(mouse_x-100,mouse_y-170,"UnitSelected8_" + string(global.unitSelected[7]));
    draw_text(mouse_x-100,mouse_y-160,"UnitSelected9_" + string(global.unitSelected[8]));
    draw_text(mouse_x-100,mouse_y-150,"UnitSelected10_" + string(global.unitSelected[9]));
    draw_text(mouse_x-100,mouse_y-140,"UnitSelected11_" + string(global.unitSelected[10]));
    draw_text(mouse_x-100,mouse_y-130,"UnitSelected12_" + string(global.unitSelected[11]));
    draw_text(mouse_x-100,mouse_y-120,"UnitSelected13_" + string(global.unitSelected[12]));
    draw_text(mouse_x-100,mouse_y-110,"UnitSelected14_" + string(global.unitSelected[13]));
    draw_text(mouse_x-100,mouse_y-100,"UnitSelected15_" + string(global.unitSelected[14]));
    draw_text(mouse_x-100,mouse_y-90,"UnitSelected16_" + string(global.unitSelected[15]));
    draw_text(mouse_x-100,mouse_y-80,"UnitSelected17_" + string(global.unitSelected[16]));
    draw_text(mouse_x-100,mouse_y-70,"UnitSelected18_" + string(global.unitSelected[17]));
    draw_text(mouse_x-100,mouse_y-60,"UnitSelected19_" + string(global.unitSelected[18]));
    draw_text(mouse_x-100,mouse_y-50,"UnitSelected20_" + string(global.unitSelected[19]));
    draw_text(mouse_x-100,mouse_y-40,"windBlowing_" + string(global.windBlowing));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Object Duplicate 

if (global.dev_mode){
    global.dev_mode_dupe = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete mode
if (global.dev_mode){
    //global.dev_mode_delete = 1; 
    
}else{
    global.shiftSelect = 1;   
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create worker

if (global.food &gt;= 400){
    instance_create(obj_townCenter.x,obj_townCenter.y-50,obj_workerHumanP1);
    global.food -= 400;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

font_delete(global.fontDmg);
part_system_destroy(global.partMining);
surface_free(global.worldGenSurface);
ds_grid_destroy(global.surfaceHeightGrid);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart game
global.tileCount = 0;
game_restart();
audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="36">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.dev_mode){
    global.dev_mode = 0;
}else{
    global.dev_mode = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End game

game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Object Duplicate OFF

if (global.dev_mode_dupe){
    global.dev_mode_dupe = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete
if (global.dev_mode &amp;&amp; global.dev_mode_delete){
    global.dev_mode_delete = 0;
}else{
    global.shiftSelect = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
